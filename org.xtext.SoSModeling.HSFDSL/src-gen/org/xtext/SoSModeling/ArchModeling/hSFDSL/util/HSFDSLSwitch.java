/**
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.hSFDSL.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.sosModeling.archModeling.hSFDSL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.sosModeling.archModeling.hSFDSL.HSFDSLPackage
 * @generated
 */
public class HSFDSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static HSFDSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HSFDSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = HSFDSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case HSFDSLPackage.STOCHASTIC_MODELING:
      {
        StochasticModeling stochasticModeling = (StochasticModeling)theEObject;
        T result = caseStochasticModeling(stochasticModeling);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.MODEL_ELEMENTS_DECARATION:
      {
        ModelElementsDecaration modelElementsDecaration = (ModelElementsDecaration)theEObject;
        T result = caseModelElementsDecaration(modelElementsDecaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.CS_DECL:
      {
        CSDecl csDecl = (CSDecl)theEObject;
        T result = caseCSDecl(csDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.CS_MEMBERS_DEFINTION:
      {
        CSMembersDefintion csMembersDefintion = (CSMembersDefintion)theEObject;
        T result = caseCSMembersDefintion(csMembersDefintion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.STOCHSTIC_BEHAVIORS:
      {
        StochsticBehaviors stochsticBehaviors = (StochsticBehaviors)theEObject;
        T result = caseStochsticBehaviors(stochsticBehaviors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.PUBLICINTERFAECE_DEF:
      {
        publicinterfaeceDef publicinterfaeceDef = (publicinterfaeceDef)theEObject;
        T result = casepublicinterfaeceDef(publicinterfaeceDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.FORMAL_PARAMETERS:
      {
        formalParameters formalParameters = (formalParameters)theEObject;
        T result = caseformalParameters(formalParameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.FORMAL_PARAMETER_LIST:
      {
        formalParameterList formalParameterList = (formalParameterList)theEObject;
        T result = caseformalParameterList(formalParameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.FORMAL_PARAMETER:
      {
        formalParameter formalParameter = (formalParameter)theEObject;
        T result = caseformalParameter(formalParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.VARIABLE_DECLARATOR_ID:
      {
        variableDeclaratorId variableDeclaratorId = (variableDeclaratorId)theEObject;
        T result = casevariableDeclaratorId(variableDeclaratorId);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.PROT_DECLARATION:
      {
        ProtDeclaration protDeclaration = (ProtDeclaration)theEObject;
        T result = caseProtDeclaration(protDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.AELEMENTS_BEHAVIOR_ROUTINES:
      {
        AElementsBehaviorRoutines aElementsBehaviorRoutines = (AElementsBehaviorRoutines)theEObject;
        T result = caseAElementsBehaviorRoutines(aElementsBehaviorRoutines);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.CCOL_ACTIONS:
      {
        CColActions cColActions = (CColActions)theEObject;
        T result = caseCColActions(cColActions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.FUNCTINALITY:
      {
        functinality functinality = (functinality)theEObject;
        T result = casefunctinality(functinality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.ADD_AELEMENTS:
      {
        AddAElements addAElements = (AddAElements)theEObject;
        T result = caseAddAElements(addAElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.ATTACH_CSS:
      {
        attachCSs attachCSs = (attachCSs)theEObject;
        T result = caseattachCSs(attachCSs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.DETACH_CSS:
      {
        detachCSs detachCSs = (detachCSs)theEObject;
        T result = casedetachCSs(detachCSs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.BIND_ELEMENTS:
      {
        BindElements bindElements = (BindElements)theEObject;
        T result = caseBindElements(bindElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.CONTROL_DECISIONS:
      {
        ControlDecisions controlDecisions = (ControlDecisions)theEObject;
        T result = caseControlDecisions(controlDecisions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.EXPONENTIAL_RATES:
      {
        ExponentialRates exponentialRates = (ExponentialRates)theEObject;
        T result = caseExponentialRates(exponentialRates);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.CCONS_DECL:
      {
        CConsDecl cConsDecl = (CConsDecl)theEObject;
        T result = caseCConsDecl(cConsDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.TELLOPERATOR:
      {
        Telloperator telloperator = (Telloperator)theEObject;
        T result = caseTelloperator(telloperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.ASKOPEATOR:
      {
        Askopeator askopeator = (Askopeator)theEObject;
        T result = caseAskopeator(askopeator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.TRAIT_DECLARATION:
      {
        traitDeclaration traitDeclaration = (traitDeclaration)theEObject;
        T result = casetraitDeclaration(traitDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.MED_DECL:
      {
        MedDecl medDecl = (MedDecl)theEObject;
        T result = caseMedDecl(medDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.MED_ROLE_DECLARATION:
      {
        MedRoleDeclaration medRoleDeclaration = (MedRoleDeclaration)theEObject;
        T result = caseMedRoleDeclaration(medRoleDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.DEFINE_MEDIATION_ROLES:
      {
        DefineMediationRoles defineMediationRoles = (DefineMediationRoles)theEObject;
        T result = caseDefineMediationRoles(defineMediationRoles);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.ABS_ARCH_DECL:
      {
        AbsArchDecl absArchDecl = (AbsArchDecl)theEObject;
        T result = caseAbsArchDecl(absArchDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.GLOBAL_PROPERTIES:
      {
        GlobalProperties globalProperties = (GlobalProperties)theEObject;
        T result = caseGlobalProperties(globalProperties);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.INIT_VALS:
      {
        initVals initVals = (initVals)theEObject;
        T result = caseinitVals(initVals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.FLOAT:
      {
        FLOAT float_ = (FLOAT)theEObject;
        T result = caseFLOAT(float_);
        if (result == null) result = caseinitVals(float_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.LOGICAL_EXPRESSION:
      {
        LogicalExpression logicalExpression = (LogicalExpression)theEObject;
        T result = caseLogicalExpression(logicalExpression);
        if (result == null) result = caseExpression(logicalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.EQUALITY_EXPRESSION:
      {
        EqualityExpression equalityExpression = (EqualityExpression)theEObject;
        T result = caseEqualityExpression(equalityExpression);
        if (result == null) result = caseExpression(equalityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.RELATIONAL_EXPRESSION:
      {
        RelationalExpression relationalExpression = (RelationalExpression)theEObject;
        T result = caseRelationalExpression(relationalExpression);
        if (result == null) result = caseExpression(relationalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.SUM_OPERATION:
      {
        SumOperation sumOperation = (SumOperation)theEObject;
        T result = caseSumOperation(sumOperation);
        if (result == null) result = caseExpression(sumOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.MINUS_OPERATION:
      {
        MinusOperation minusOperation = (MinusOperation)theEObject;
        T result = caseMinusOperation(minusOperation);
        if (result == null) result = caseExpression(minusOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.TERM:
      {
        Term term = (Term)theEObject;
        T result = caseTerm(term);
        if (result == null) result = caseExpression(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.NEGATION_EXPRESSION:
      {
        NegationExpression negationExpression = (NegationExpression)theEObject;
        T result = caseNegationExpression(negationExpression);
        if (result == null) result = caseExpression(negationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.VARIABLE_REF:
      {
        VariableRef variableRef = (VariableRef)theEObject;
        T result = caseVariableRef(variableRef);
        if (result == null) result = caseExpression(variableRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.INTEGER_LITERAL:
      {
        IntegerLiteral integerLiteral = (IntegerLiteral)theEObject;
        T result = caseIntegerLiteral(integerLiteral);
        if (result == null) result = caseExpression(integerLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.REAL_LITERAL:
      {
        RealLiteral realLiteral = (RealLiteral)theEObject;
        T result = caseRealLiteral(realLiteral);
        if (result == null) result = caseExpression(realLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseExpression(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case HSFDSLPackage.BOOLEAN_LITERAL:
      {
        BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
        T result = caseBooleanLiteral(booleanLiteral);
        if (result == null) result = caseExpression(booleanLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stochastic Modeling</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stochastic Modeling</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStochasticModeling(StochasticModeling object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Elements Decaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Elements Decaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelElementsDecaration(ModelElementsDecaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CS Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CS Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCSDecl(CSDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CS Members Defintion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CS Members Defintion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCSMembersDefintion(CSMembersDefintion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stochstic Behaviors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stochstic Behaviors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStochsticBehaviors(StochsticBehaviors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>publicinterfaece Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>publicinterfaece Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepublicinterfaeceDef(publicinterfaeceDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformalParameters(formalParameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformalParameterList(formalParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formal Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formal Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformalParameter(formalParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable Declarator Id</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable Declarator Id</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariableDeclaratorId(variableDeclaratorId object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prot Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prot Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProtDeclaration(ProtDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AElements Behavior Routines</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AElements Behavior Routines</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAElementsBehaviorRoutines(AElementsBehaviorRoutines object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CCol Actions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CCol Actions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCColActions(CColActions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>functinality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>functinality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunctinality(functinality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add AElements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add AElements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddAElements(AddAElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>attach CSs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>attach CSs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseattachCSs(attachCSs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>detach CSs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>detach CSs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedetachCSs(detachCSs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bind Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bind Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBindElements(BindElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control Decisions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control Decisions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlDecisions(ControlDecisions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exponential Rates</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exponential Rates</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExponentialRates(ExponentialRates object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CCons Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CCons Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCConsDecl(CConsDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Telloperator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Telloperator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTelloperator(Telloperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Askopeator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Askopeator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAskopeator(Askopeator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>trait Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>trait Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetraitDeclaration(traitDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Med Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Med Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMedDecl(MedDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Med Role Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Med Role Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMedRoleDeclaration(MedRoleDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define Mediation Roles</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define Mediation Roles</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefineMediationRoles(DefineMediationRoles object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abs Arch Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abs Arch Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbsArchDecl(AbsArchDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global Properties</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global Properties</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobalProperties(GlobalProperties object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init Vals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init Vals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitVals(initVals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FLOAT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FLOAT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFLOAT(FLOAT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalExpression(LogicalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityExpression(EqualityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relational Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relational Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationalExpression(RelationalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSumOperation(SumOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinusOperation(MinusOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerm(Term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegationExpression(NegationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableRef(VariableRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerLiteral(IntegerLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealLiteral(RealLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteral(BooleanLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //HSFDSLSwitch
