/**
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.hSFDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.sosModeling.archModeling.hSFDSL.AElementsBehaviorRoutines;
import org.xtext.sosModeling.archModeling.hSFDSL.ControlDecisions;
import org.xtext.sosModeling.archModeling.hSFDSL.HSFDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Control Decisions</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.ControlDecisionsImpl#getExpressionDecl <em>Expression Decl</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.ControlDecisionsImpl#getStatementDecl1 <em>Statement Decl1</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.ControlDecisionsImpl#getExpressionOrDecl <em>Expression Or Decl</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.ControlDecisionsImpl#getStatementDecl2 <em>Statement Decl2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ControlDecisionsImpl extends MinimalEObjectImpl.Container implements ControlDecisions
{
  /**
   * The cached value of the '{@link #getExpressionDecl() <em>Expression Decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionDecl()
   * @generated
   * @ordered
   */
  protected AElementsBehaviorRoutines expressionDecl;

  /**
   * The cached value of the '{@link #getStatementDecl1() <em>Statement Decl1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementDecl1()
   * @generated
   * @ordered
   */
  protected EList<AElementsBehaviorRoutines> statementDecl1;

  /**
   * The cached value of the '{@link #getExpressionOrDecl() <em>Expression Or Decl</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionOrDecl()
   * @generated
   * @ordered
   */
  protected EList<AElementsBehaviorRoutines> expressionOrDecl;

  /**
   * The cached value of the '{@link #getStatementDecl2() <em>Statement Decl2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementDecl2()
   * @generated
   * @ordered
   */
  protected EList<AElementsBehaviorRoutines> statementDecl2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControlDecisionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HSFDSLPackage.Literals.CONTROL_DECISIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AElementsBehaviorRoutines getExpressionDecl()
  {
    return expressionDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionDecl(AElementsBehaviorRoutines newExpressionDecl, NotificationChain msgs)
  {
    AElementsBehaviorRoutines oldExpressionDecl = expressionDecl;
    expressionDecl = newExpressionDecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL, oldExpressionDecl, newExpressionDecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionDecl(AElementsBehaviorRoutines newExpressionDecl)
  {
    if (newExpressionDecl != expressionDecl)
    {
      NotificationChain msgs = null;
      if (expressionDecl != null)
        msgs = ((InternalEObject)expressionDecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL, null, msgs);
      if (newExpressionDecl != null)
        msgs = ((InternalEObject)newExpressionDecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL, null, msgs);
      msgs = basicSetExpressionDecl(newExpressionDecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL, newExpressionDecl, newExpressionDecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AElementsBehaviorRoutines> getStatementDecl1()
  {
    if (statementDecl1 == null)
    {
      statementDecl1 = new EObjectContainmentEList<AElementsBehaviorRoutines>(AElementsBehaviorRoutines.class, this, HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL1);
    }
    return statementDecl1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AElementsBehaviorRoutines> getExpressionOrDecl()
  {
    if (expressionOrDecl == null)
    {
      expressionOrDecl = new EObjectContainmentEList<AElementsBehaviorRoutines>(AElementsBehaviorRoutines.class, this, HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_OR_DECL);
    }
    return expressionOrDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AElementsBehaviorRoutines> getStatementDecl2()
  {
    if (statementDecl2 == null)
    {
      statementDecl2 = new EObjectContainmentEList<AElementsBehaviorRoutines>(AElementsBehaviorRoutines.class, this, HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL2);
    }
    return statementDecl2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL:
        return basicSetExpressionDecl(null, msgs);
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL1:
        return ((InternalEList<?>)getStatementDecl1()).basicRemove(otherEnd, msgs);
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_OR_DECL:
        return ((InternalEList<?>)getExpressionOrDecl()).basicRemove(otherEnd, msgs);
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL2:
        return ((InternalEList<?>)getStatementDecl2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL:
        return getExpressionDecl();
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL1:
        return getStatementDecl1();
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_OR_DECL:
        return getExpressionOrDecl();
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL2:
        return getStatementDecl2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL:
        setExpressionDecl((AElementsBehaviorRoutines)newValue);
        return;
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL1:
        getStatementDecl1().clear();
        getStatementDecl1().addAll((Collection<? extends AElementsBehaviorRoutines>)newValue);
        return;
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_OR_DECL:
        getExpressionOrDecl().clear();
        getExpressionOrDecl().addAll((Collection<? extends AElementsBehaviorRoutines>)newValue);
        return;
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL2:
        getStatementDecl2().clear();
        getStatementDecl2().addAll((Collection<? extends AElementsBehaviorRoutines>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL:
        setExpressionDecl((AElementsBehaviorRoutines)null);
        return;
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL1:
        getStatementDecl1().clear();
        return;
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_OR_DECL:
        getExpressionOrDecl().clear();
        return;
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL2:
        getStatementDecl2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_DECL:
        return expressionDecl != null;
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL1:
        return statementDecl1 != null && !statementDecl1.isEmpty();
      case HSFDSLPackage.CONTROL_DECISIONS__EXPRESSION_OR_DECL:
        return expressionOrDecl != null && !expressionOrDecl.isEmpty();
      case HSFDSLPackage.CONTROL_DECISIONS__STATEMENT_DECL2:
        return statementDecl2 != null && !statementDecl2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ControlDecisionsImpl
