/**
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.hSFDSL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.sosModeling.archModeling.hSFDSL.Askopeator;
import org.xtext.sosModeling.archModeling.hSFDSL.ExponentialRates;
import org.xtext.sosModeling.archModeling.hSFDSL.HSFDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Askopeator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.AskopeatorImpl#getConstraintData <em>Constraint Data</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.AskopeatorImpl#getRate <em>Rate</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AskopeatorImpl extends MinimalEObjectImpl.Container implements Askopeator
{
  /**
   * The default value of the '{@link #getConstraintData() <em>Constraint Data</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintData()
   * @generated
   * @ordered
   */
  protected static final String CONSTRAINT_DATA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstraintData() <em>Constraint Data</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintData()
   * @generated
   * @ordered
   */
  protected String constraintData = CONSTRAINT_DATA_EDEFAULT;

  /**
   * The cached value of the '{@link #getRate() <em>Rate</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRate()
   * @generated
   * @ordered
   */
  protected ExponentialRates rate;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AskopeatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HSFDSLPackage.Literals.ASKOPEATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstraintData()
  {
    return constraintData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraintData(String newConstraintData)
  {
    String oldConstraintData = constraintData;
    constraintData = newConstraintData;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HSFDSLPackage.ASKOPEATOR__CONSTRAINT_DATA, oldConstraintData, constraintData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExponentialRates getRate()
  {
    if (rate != null && rate.eIsProxy())
    {
      InternalEObject oldRate = (InternalEObject)rate;
      rate = (ExponentialRates)eResolveProxy(oldRate);
      if (rate != oldRate)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, HSFDSLPackage.ASKOPEATOR__RATE, oldRate, rate));
      }
    }
    return rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExponentialRates basicGetRate()
  {
    return rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRate(ExponentialRates newRate)
  {
    ExponentialRates oldRate = rate;
    rate = newRate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HSFDSLPackage.ASKOPEATOR__RATE, oldRate, rate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HSFDSLPackage.ASKOPEATOR__CONSTRAINT_DATA:
        return getConstraintData();
      case HSFDSLPackage.ASKOPEATOR__RATE:
        if (resolve) return getRate();
        return basicGetRate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HSFDSLPackage.ASKOPEATOR__CONSTRAINT_DATA:
        setConstraintData((String)newValue);
        return;
      case HSFDSLPackage.ASKOPEATOR__RATE:
        setRate((ExponentialRates)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.ASKOPEATOR__CONSTRAINT_DATA:
        setConstraintData(CONSTRAINT_DATA_EDEFAULT);
        return;
      case HSFDSLPackage.ASKOPEATOR__RATE:
        setRate((ExponentialRates)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.ASKOPEATOR__CONSTRAINT_DATA:
        return CONSTRAINT_DATA_EDEFAULT == null ? constraintData != null : !CONSTRAINT_DATA_EDEFAULT.equals(constraintData);
      case HSFDSLPackage.ASKOPEATOR__RATE:
        return rate != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ConstraintData: ");
    result.append(constraintData);
    result.append(')');
    return result.toString();
  }

} //AskopeatorImpl
