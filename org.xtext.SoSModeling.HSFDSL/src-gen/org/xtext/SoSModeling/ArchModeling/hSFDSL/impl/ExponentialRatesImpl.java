/**
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.hSFDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.sosModeling.archModeling.hSFDSL.ExponentialRates;
import org.xtext.sosModeling.archModeling.hSFDSL.Expression;
import org.xtext.sosModeling.archModeling.hSFDSL.HSFDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exponential Rates</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.ExponentialRatesImpl#getDelayValue <em>Delay Value</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.ExponentialRatesImpl#getExponentialRates <em>Exponential Rates</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExponentialRatesImpl extends MinimalEObjectImpl.Container implements ExponentialRates
{
  /**
   * The default value of the '{@link #getDelayValue() <em>Delay Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelayValue()
   * @generated
   * @ordered
   */
  protected static final int DELAY_VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDelayValue() <em>Delay Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelayValue()
   * @generated
   * @ordered
   */
  protected int delayValue = DELAY_VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getExponentialRates() <em>Exponential Rates</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExponentialRates()
   * @generated
   * @ordered
   */
  protected Expression exponentialRates;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExponentialRatesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HSFDSLPackage.Literals.EXPONENTIAL_RATES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDelayValue()
  {
    return delayValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelayValue(int newDelayValue)
  {
    int oldDelayValue = delayValue;
    delayValue = newDelayValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HSFDSLPackage.EXPONENTIAL_RATES__DELAY_VALUE, oldDelayValue, delayValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExponentialRates()
  {
    return exponentialRates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExponentialRates(Expression newExponentialRates, NotificationChain msgs)
  {
    Expression oldExponentialRates = exponentialRates;
    exponentialRates = newExponentialRates;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES, oldExponentialRates, newExponentialRates);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExponentialRates(Expression newExponentialRates)
  {
    if (newExponentialRates != exponentialRates)
    {
      NotificationChain msgs = null;
      if (exponentialRates != null)
        msgs = ((InternalEObject)exponentialRates).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES, null, msgs);
      if (newExponentialRates != null)
        msgs = ((InternalEObject)newExponentialRates).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES, null, msgs);
      msgs = basicSetExponentialRates(newExponentialRates, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES, newExponentialRates, newExponentialRates));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES:
        return basicSetExponentialRates(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HSFDSLPackage.EXPONENTIAL_RATES__DELAY_VALUE:
        return getDelayValue();
      case HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES:
        return getExponentialRates();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HSFDSLPackage.EXPONENTIAL_RATES__DELAY_VALUE:
        setDelayValue((Integer)newValue);
        return;
      case HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES:
        setExponentialRates((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.EXPONENTIAL_RATES__DELAY_VALUE:
        setDelayValue(DELAY_VALUE_EDEFAULT);
        return;
      case HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES:
        setExponentialRates((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.EXPONENTIAL_RATES__DELAY_VALUE:
        return delayValue != DELAY_VALUE_EDEFAULT;
      case HSFDSLPackage.EXPONENTIAL_RATES__EXPONENTIAL_RATES:
        return exponentialRates != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (delayValue: ");
    result.append(delayValue);
    result.append(')');
    return result.toString();
  }

} //ExponentialRatesImpl
