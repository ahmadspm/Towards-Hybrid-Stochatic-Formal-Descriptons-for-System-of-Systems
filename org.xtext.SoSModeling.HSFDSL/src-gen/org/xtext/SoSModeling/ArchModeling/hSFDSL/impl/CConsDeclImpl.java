/**
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.hSFDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.sosModeling.archModeling.hSFDSL.Askopeator;
import org.xtext.sosModeling.archModeling.hSFDSL.CConsDecl;
import org.xtext.sosModeling.archModeling.hSFDSL.HSFDSLPackage;
import org.xtext.sosModeling.archModeling.hSFDSL.Telloperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CCons Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.CConsDeclImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.CConsDeclImpl#getAskconstraints <em>Askconstraints</em>}</li>
 *   <li>{@link org.xtext.sosModeling.archModeling.hSFDSL.impl.CConsDeclImpl#getTellconstraints <em>Tellconstraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CConsDeclImpl extends MinimalEObjectImpl.Container implements CConsDecl
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAskconstraints() <em>Askconstraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAskconstraints()
   * @generated
   * @ordered
   */
  protected EList<Askopeator> askconstraints;

  /**
   * The cached value of the '{@link #getTellconstraints() <em>Tellconstraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTellconstraints()
   * @generated
   * @ordered
   */
  protected EList<Telloperator> tellconstraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CConsDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HSFDSLPackage.Literals.CCONS_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HSFDSLPackage.CCONS_DECL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Askopeator> getAskconstraints()
  {
    if (askconstraints == null)
    {
      askconstraints = new EObjectContainmentEList<Askopeator>(Askopeator.class, this, HSFDSLPackage.CCONS_DECL__ASKCONSTRAINTS);
    }
    return askconstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Telloperator> getTellconstraints()
  {
    if (tellconstraints == null)
    {
      tellconstraints = new EObjectContainmentEList<Telloperator>(Telloperator.class, this, HSFDSLPackage.CCONS_DECL__TELLCONSTRAINTS);
    }
    return tellconstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CCONS_DECL__ASKCONSTRAINTS:
        return ((InternalEList<?>)getAskconstraints()).basicRemove(otherEnd, msgs);
      case HSFDSLPackage.CCONS_DECL__TELLCONSTRAINTS:
        return ((InternalEList<?>)getTellconstraints()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CCONS_DECL__NAME:
        return getName();
      case HSFDSLPackage.CCONS_DECL__ASKCONSTRAINTS:
        return getAskconstraints();
      case HSFDSLPackage.CCONS_DECL__TELLCONSTRAINTS:
        return getTellconstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CCONS_DECL__NAME:
        setName((String)newValue);
        return;
      case HSFDSLPackage.CCONS_DECL__ASKCONSTRAINTS:
        getAskconstraints().clear();
        getAskconstraints().addAll((Collection<? extends Askopeator>)newValue);
        return;
      case HSFDSLPackage.CCONS_DECL__TELLCONSTRAINTS:
        getTellconstraints().clear();
        getTellconstraints().addAll((Collection<? extends Telloperator>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CCONS_DECL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case HSFDSLPackage.CCONS_DECL__ASKCONSTRAINTS:
        getAskconstraints().clear();
        return;
      case HSFDSLPackage.CCONS_DECL__TELLCONSTRAINTS:
        getTellconstraints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HSFDSLPackage.CCONS_DECL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case HSFDSLPackage.CCONS_DECL__ASKCONSTRAINTS:
        return askconstraints != null && !askconstraints.isEmpty();
      case HSFDSLPackage.CCONS_DECL__TELLCONSTRAINTS:
        return tellconstraints != null && !tellconstraints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //CConsDeclImpl
