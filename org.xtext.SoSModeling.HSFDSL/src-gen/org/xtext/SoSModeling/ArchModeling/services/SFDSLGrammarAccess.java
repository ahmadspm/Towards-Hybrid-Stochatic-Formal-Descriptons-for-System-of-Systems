/*
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SFDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StochasticModelingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.StochasticModeling");
		private final Assignment cStochasticModelElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStochasticModelElementsModelElementsDecarationParserRuleCall_0 = (RuleCall)cStochasticModelElementsAssignment.eContents().get(0);
		
		//StochasticModeling:
		//	StochasticModelElements+=ModelElementsDecaration;
		@Override public ParserRule getRule() { return rule; }
		
		//StochasticModelElements+=ModelElementsDecaration
		public Assignment getStochasticModelElementsAssignment() { return cStochasticModelElementsAssignment; }
		
		//ModelElementsDecaration
		public RuleCall getStochasticModelElementsModelElementsDecarationParserRuleCall_0() { return cStochasticModelElementsModelElementsDecarationParserRuleCall_0; }
	}
	public class ModelElementsDecarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.ModelElementsDecaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelElementsDecarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractArchModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbstractArchModelAbsArchDeclParserRuleCall_1_0 = (RuleCall)cAbstractArchModelAssignment_1.eContents().get(0);
		private final Assignment cConstiuenetSystemSDesignAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstiuenetSystemSDesignCSDeclParserRuleCall_2_0 = (RuleCall)cConstiuenetSystemSDesignAssignment_2.eContents().get(0);
		private final Assignment cMediatorDesignAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMediatorDesignMedDeclParserRuleCall_3_0 = (RuleCall)cMediatorDesignAssignment_3.eContents().get(0);
		private final Assignment cConcurrentConstraintsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConcurrentConstraintsCConsDeclParserRuleCall_4_0 = (RuleCall)cConcurrentConstraintsAssignment_4.eContents().get(0);
		private final Assignment cArchitecutreElementsBehaviorsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArchitecutreElementsBehaviorsAElementsBehaviorRoutinesParserRuleCall_5_0 = (RuleCall)cArchitecutreElementsBehaviorsAssignment_5.eContents().get(0);
		private final Keyword cModelElementsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameQualifiedNameParserRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Assignment cInterfceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInterfcePublicinterfaeceDefParserRuleCall_8_0 = (RuleCall)cInterfceAssignment_8.eContents().get(0);
		private final Assignment cArchTraitsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cArchTraitsTraitDeclarationParserRuleCall_9_0 = (RuleCall)cArchTraitsAssignment_9.eContents().get(0);
		
		//ModelElementsDecaration:
		//	{ModelElementsDecaration} AbstractArchModel+=AbsArchDecl*
		//	ConstiuenetSystemSDesign+=CSDecl*
		//	MediatorDesign+=MedDecl*
		//	ConcurrentConstraints+=CConsDecl*
		//	ArchitecutreElementsBehaviors+=AElementsBehaviorRoutines*
		//	'ModelElements' name=QualifiedName
		//	Interfce+=publicinterfaeceDef
		//	ArchTraits+=traitDeclaration*
		//	// Terminal Rules Architecture Coalition Constraints related to Performance, Reliability and Security 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ModelElementsDecaration} AbstractArchModel+=AbsArchDecl* ConstiuenetSystemSDesign+=CSDecl* MediatorDesign+=MedDecl*
		//ConcurrentConstraints+=CConsDecl* ArchitecutreElementsBehaviors+=AElementsBehaviorRoutines* 'ModelElements'
		//name=QualifiedName Interfce+=publicinterfaeceDef ArchTraits+=traitDeclaration*
		public Group getGroup() { return cGroup; }
		
		//{ModelElementsDecaration}
		public Action getModelElementsDecarationAction_0() { return cModelElementsDecarationAction_0; }
		
		//AbstractArchModel+=AbsArchDecl*
		public Assignment getAbstractArchModelAssignment_1() { return cAbstractArchModelAssignment_1; }
		
		//AbsArchDecl
		public RuleCall getAbstractArchModelAbsArchDeclParserRuleCall_1_0() { return cAbstractArchModelAbsArchDeclParserRuleCall_1_0; }
		
		//ConstiuenetSystemSDesign+=CSDecl*
		public Assignment getConstiuenetSystemSDesignAssignment_2() { return cConstiuenetSystemSDesignAssignment_2; }
		
		//CSDecl
		public RuleCall getConstiuenetSystemSDesignCSDeclParserRuleCall_2_0() { return cConstiuenetSystemSDesignCSDeclParserRuleCall_2_0; }
		
		//MediatorDesign+=MedDecl*
		public Assignment getMediatorDesignAssignment_3() { return cMediatorDesignAssignment_3; }
		
		//MedDecl
		public RuleCall getMediatorDesignMedDeclParserRuleCall_3_0() { return cMediatorDesignMedDeclParserRuleCall_3_0; }
		
		//ConcurrentConstraints+=CConsDecl*
		public Assignment getConcurrentConstraintsAssignment_4() { return cConcurrentConstraintsAssignment_4; }
		
		//CConsDecl
		public RuleCall getConcurrentConstraintsCConsDeclParserRuleCall_4_0() { return cConcurrentConstraintsCConsDeclParserRuleCall_4_0; }
		
		//ArchitecutreElementsBehaviors+=AElementsBehaviorRoutines*
		public Assignment getArchitecutreElementsBehaviorsAssignment_5() { return cArchitecutreElementsBehaviorsAssignment_5; }
		
		//AElementsBehaviorRoutines
		public RuleCall getArchitecutreElementsBehaviorsAElementsBehaviorRoutinesParserRuleCall_5_0() { return cArchitecutreElementsBehaviorsAElementsBehaviorRoutinesParserRuleCall_5_0; }
		
		//'ModelElements'
		public Keyword getModelElementsKeyword_6() { return cModelElementsKeyword_6; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_7_0() { return cNameQualifiedNameParserRuleCall_7_0; }
		
		//Interfce+=publicinterfaeceDef
		public Assignment getInterfceAssignment_8() { return cInterfceAssignment_8; }
		
		//publicinterfaeceDef
		public RuleCall getInterfcePublicinterfaeceDefParserRuleCall_8_0() { return cInterfcePublicinterfaeceDefParserRuleCall_8_0; }
		
		//ArchTraits+=traitDeclaration*
		public Assignment getArchTraitsAssignment_9() { return cArchTraitsAssignment_9; }
		
		//traitDeclaration
		public RuleCall getArchTraitsTraitDeclarationParserRuleCall_9_0() { return cArchTraitsTraitDeclarationParserRuleCall_9_0; }
	}
	public class CSDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.CSDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstituientSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCSDesignConsistsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCSDesignConsistsCSMembersDefintionParserRuleCall_3_0 = (RuleCall)cCSDesignConsistsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// CSDESIGN DEFINTION 
		//CSDecl: // later add  parameters list at decleation time, considering rates of actions and concurrent constraints
		//	'Constituient-System' name=ID '{' CSDesignConsists+=CSMembersDefintion '}' //('[protocol' '{' assertions+=AssertionDecl+ '}')? // shall decide to inculde in CS behavior Defintion or not
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// later add  parameters list at decleation time, considering rates of actions and concurrent constraints
		//'Constituient-System' name=ID '{' CSDesignConsists+=CSMembersDefintion '}'
		public Group getGroup() { return cGroup; }
		
		//// later add  parameters list at decleation time, considering rates of actions and concurrent constraints
		//'Constituient-System'
		public Keyword getConstituientSystemKeyword_0() { return cConstituientSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//CSDesignConsists+=CSMembersDefintion
		public Assignment getCSDesignConsistsAssignment_3() { return cCSDesignConsistsAssignment_3; }
		
		//CSMembersDefintion
		public RuleCall getCSDesignConsistsCSMembersDefintionParserRuleCall_3_0() { return cCSDesignConsistsCSMembersDefintionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CSMembersDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.CSMembersDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPortsProtDeclarationParserRuleCall_0_0 = (RuleCall)cPortsAssignment_0.eContents().get(0);
		private final Assignment cAActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAActionsAElementsBehaviorRoutinesParserRuleCall_1_0 = (RuleCall)cAActionsAssignment_1.eContents().get(0);
		private final Assignment cCSConConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCSConConstraintsCConsDeclParserRuleCall_2_0 = (RuleCall)cCSConConstraintsAssignment_2.eContents().get(0);
		private final Assignment cCSCoreBehaviorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCSCoreBehaviorStochsticBehaviorsParserRuleCall_3_0 = (RuleCall)cCSCoreBehaviorAssignment_3.eContents().get(0);
		
		//CSMembersDefintion:
		//	Ports+=ProtDeclaration AActions+=AElementsBehaviorRoutines CSConConstraints+=CConsDecl?
		//	CSCoreBehavior+=StochsticBehaviors* // added for must have behaviros 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Ports+=ProtDeclaration AActions+=AElementsBehaviorRoutines CSConConstraints+=CConsDecl?
		//CSCoreBehavior+=StochsticBehaviors*
		public Group getGroup() { return cGroup; }
		
		//Ports+=ProtDeclaration
		public Assignment getPortsAssignment_0() { return cPortsAssignment_0; }
		
		//ProtDeclaration
		public RuleCall getPortsProtDeclarationParserRuleCall_0_0() { return cPortsProtDeclarationParserRuleCall_0_0; }
		
		//AActions+=AElementsBehaviorRoutines
		public Assignment getAActionsAssignment_1() { return cAActionsAssignment_1; }
		
		//AElementsBehaviorRoutines
		public RuleCall getAActionsAElementsBehaviorRoutinesParserRuleCall_1_0() { return cAActionsAElementsBehaviorRoutinesParserRuleCall_1_0; }
		
		//CSConConstraints+=CConsDecl?
		public Assignment getCSConConstraintsAssignment_2() { return cCSConConstraintsAssignment_2; }
		
		//CConsDecl
		public RuleCall getCSConConstraintsCConsDeclParserRuleCall_2_0() { return cCSConConstraintsCConsDeclParserRuleCall_2_0; }
		
		//CSCoreBehavior+=StochsticBehaviors*
		public Assignment getCSCoreBehaviorAssignment_3() { return cCSCoreBehaviorAssignment_3; }
		
		//StochsticBehaviors
		public RuleCall getCSCoreBehaviorStochsticBehaviorsParserRuleCall_3_0() { return cCSCoreBehaviorStochsticBehaviorsParserRuleCall_3_0; }
	}
	public class StochsticBehaviorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.StochsticBehaviors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCSbehaviorsisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunctinoalaityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParamsDeclAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsDeclFormalParametersParserRuleCall_4_0 = (RuleCall)cParamsDeclAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFunctionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFunctionsAElementsBehaviorRoutinesParserRuleCall_7_0 = (RuleCall)cFunctionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//StochsticBehaviors: // Actual behavior of CS when written HSF- DSL at instance 
		//// Behavior is made of {     
		//// A required service to constituent system -->  void Received (Type data) {
		//// and then privoided services  --> sent (): Both are embeeded into  AElementsBehaviorRoutines
		//	'CSbehaviorsis' 'functinoalaity' type=types name=ID paramsDecl=formalParameters ('[' ']')* '{'
		//	functions+=AElementsBehaviorRoutines '}';
		@Override public ParserRule getRule() { return rule; }
		
		//// Actual behavior of CS when written HSF- DSL at instance 
		//// Behavior is made of {     
		//// A required service to constituent system -->  void Received (Type data) {
		//// and then privoided services  --> sent (): Both are embeeded into  AElementsBehaviorRoutines
		//'CSbehaviorsis' 'functinoalaity' type=types name=ID paramsDecl=formalParameters ('[' ']')* '{'
		//functions+=AElementsBehaviorRoutines '}'
		public Group getGroup() { return cGroup; }
		
		//// Actual behavior of CS when written HSF- DSL at instance 
		//// Behavior is made of {     
		//// A required service to constituent system -->  void Received (Type data) {
		//// and then privoided services  --> sent (): Both are embeeded into  AElementsBehaviorRoutines
		//'CSbehaviorsis'
		public Keyword getCSbehaviorsisKeyword_0() { return cCSbehaviorsisKeyword_0; }
		
		//'functinoalaity'
		public Keyword getFunctinoalaityKeyword_1() { return cFunctinoalaityKeyword_1; }
		
		//type=types
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//types
		public RuleCall getTypeTypesParserRuleCall_2_0() { return cTypeTypesParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//paramsDecl=formalParameters
		public Assignment getParamsDeclAssignment_4() { return cParamsDeclAssignment_4; }
		
		//formalParameters
		public RuleCall getParamsDeclFormalParametersParserRuleCall_4_0() { return cParamsDeclFormalParametersParserRuleCall_4_0; }
		
		//('[' ']')*
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_1() { return cRightSquareBracketKeyword_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//functions+=AElementsBehaviorRoutines
		public Assignment getFunctionsAssignment_7() { return cFunctionsAssignment_7; }
		
		//AElementsBehaviorRoutines
		public RuleCall getFunctionsAElementsBehaviorRoutinesParserRuleCall_7_0() { return cFunctionsAElementsBehaviorRoutinesParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PortandRoleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.portandRoleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cProvidesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRequiresKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//portandRoleType:
		//	'provides' | 'requires';
		@Override public ParserRule getRule() { return rule; }
		
		//'provides' | 'requires'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'provides'
		public Keyword getProvidesKeyword_0() { return cProvidesKeyword_0; }
		
		//'requires'
		public Keyword getRequiresKeyword_1() { return cRequiresKeyword_1; }
	}
	public class PublicinterfaeceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.publicinterfaeceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicIntefaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsDeclFormalParametersParserRuleCall_3_0 = (RuleCall)cParamsDeclAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////provides:
		////name=ID
		////;
		////requires:
		////name=ID
		////;
		//publicinterfaeceDef: // interface signatures 
		//	'PublicInteface' Name=ID '{' //'functionality' Name= ID
		//	paramsDecl=formalParameters ('[' ']')* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//// interface signatures 
		//'PublicInteface' Name=ID '{' //'functionality' Name= ID
		//paramsDecl=formalParameters ('[' ']')* ';'
		public Group getGroup() { return cGroup; }
		
		//// interface signatures 
		//'PublicInteface'
		public Keyword getPublicIntefaceKeyword_0() { return cPublicIntefaceKeyword_0; }
		
		//Name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////'functionality' Name= ID
		//paramsDecl=formalParameters
		public Assignment getParamsDeclAssignment_3() { return cParamsDeclAssignment_3; }
		
		//formalParameters
		public RuleCall getParamsDeclFormalParametersParserRuleCall_3_0() { return cParamsDeclFormalParametersParserRuleCall_3_0; }
		
		//('[' ']')*
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_1() { return cRightSquareBracketKeyword_4_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FormalParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.formalParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsDeclFormalParameterListParserRuleCall_2_0 = (RuleCall)cParamsDeclAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//formalParameters:
		//	{formalParameters} '(' paramsDecl+=formalParameterList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{formalParameters} '(' paramsDecl+=formalParameterList? ')'
		public Group getGroup() { return cGroup; }
		
		//{formalParameters}
		public Action getFormalParametersAction_0() { return cFormalParametersAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//paramsDecl+=formalParameterList?
		public Assignment getParamsDeclAssignment_2() { return cParamsDeclAssignment_2; }
		
		//formalParameterList
		public RuleCall getParamsDeclFormalParameterListParserRuleCall_2_0() { return cParamsDeclFormalParameterListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FormalParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.formalParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamDeclFormalParameterParserRuleCall_0_0 = (RuleCall)cParamDeclAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsDeclFormalParameterParserRuleCall_2_0 = (RuleCall)cParamsDeclAssignment_2.eContents().get(0);
		
		//formalParameterList:
		//	paramDecl=formalParameter ',' paramsDecl+=formalParameter*;
		@Override public ParserRule getRule() { return rule; }
		
		//paramDecl=formalParameter ',' paramsDecl+=formalParameter*
		public Group getGroup() { return cGroup; }
		
		//paramDecl=formalParameter
		public Assignment getParamDeclAssignment_0() { return cParamDeclAssignment_0; }
		
		//formalParameter
		public RuleCall getParamDeclFormalParameterParserRuleCall_0_0() { return cParamDeclFormalParameterParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//paramsDecl+=formalParameter*
		public Assignment getParamsDeclAssignment_2() { return cParamsDeclAssignment_2; }
		
		//formalParameter
		public RuleCall getParamsDeclFormalParameterParserRuleCall_2_0() { return cParamsDeclFormalParameterParserRuleCall_2_0; }
	}
	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.formalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableDeclaratorIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//formalParameter:
		//	type=types name=variableDeclaratorId;
		@Override public ParserRule getRule() { return rule; }
		
		//type=types name=variableDeclaratorId
		public Group getGroup() { return cGroup; }
		
		//type=types
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//types
		public RuleCall getTypeTypesParserRuleCall_0_0() { return cTypeTypesParserRuleCall_0_0; }
		
		//name=variableDeclaratorId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//variableDeclaratorId
		public RuleCall getNameVariableDeclaratorIdParserRuleCall_1_0() { return cNameVariableDeclaratorIdParserRuleCall_1_0; }
	}
	public class VariableDeclaratorIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.variableDeclaratorId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//variableDeclaratorId:
		//	name=ID ('[' ']')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('[' ']')* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('[' ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ProtDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.ProtDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPorttypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPorttypePortandRoleTypeParserRuleCall_1_0 = (RuleCall)cPorttypeAssignment_1.eContents().get(0);
		private final Keyword cPortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPubliicIntractionpointareAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPubliicIntractionpointarePublicinterfaeceDefCrossReference_3_0 = (CrossReference)cPubliicIntractionpointareAssignment_3.eContents().get(0);
		private final RuleCall cPubliicIntractionpointarePublicinterfaeceDefIDTerminalRuleCall_3_0_1 = (RuleCall)cPubliicIntractionpointarePublicinterfaeceDefCrossReference_3_0.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//ProtDeclaration:
		//	{ProtDeclaration} porttype=portandRoleType 'port'
		//	PubliicIntractionpointare=[publicinterfaeceDef] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtDeclaration} porttype=portandRoleType 'port' PubliicIntractionpointare=[publicinterfaeceDef] name=ID
		public Group getGroup() { return cGroup; }
		
		//{ProtDeclaration}
		public Action getProtDeclarationAction_0() { return cProtDeclarationAction_0; }
		
		//porttype=portandRoleType
		public Assignment getPorttypeAssignment_1() { return cPorttypeAssignment_1; }
		
		//portandRoleType
		public RuleCall getPorttypePortandRoleTypeParserRuleCall_1_0() { return cPorttypePortandRoleTypeParserRuleCall_1_0; }
		
		//'port'
		public Keyword getPortKeyword_2() { return cPortKeyword_2; }
		
		//PubliicIntractionpointare=[publicinterfaeceDef]
		public Assignment getPubliicIntractionpointareAssignment_3() { return cPubliicIntractionpointareAssignment_3; }
		
		//[publicinterfaeceDef]
		public CrossReference getPubliicIntractionpointarePublicinterfaeceDefCrossReference_3_0() { return cPubliicIntractionpointarePublicinterfaeceDefCrossReference_3_0; }
		
		//ID
		public RuleCall getPubliicIntractionpointarePublicinterfaeceDefIDTerminalRuleCall_3_0_1() { return cPubliicIntractionpointarePublicinterfaeceDefIDTerminalRuleCall_3_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID*);
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID*)
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID*)
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID*
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AElementsBehaviorRoutinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.AElementsBehaviorRoutines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAElementsBehaviorRoutinesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCollaborativeActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCollaborativeActionsCColActionsParserRuleCall_1_0 = (RuleCall)cCollaborativeActionsAssignment_1.eContents().get(0);
		private final Assignment cCaolitionBindingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaolitionBindingAttachCSsParserRuleCall_2_0 = (RuleCall)cCaolitionBindingAssignment_2.eContents().get(0);
		private final Assignment cRemoveElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRemoveElementsDetachCSsParserRuleCall_3_0 = (RuleCall)cRemoveElementsAssignment_3.eContents().get(0);
		private final Assignment cConnectElenentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectElenentsBindElementsParserRuleCall_4_0 = (RuleCall)cConnectElenentsAssignment_4.eContents().get(0);
		private final Assignment cControlDecisionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cControlDecisionsControlDecisionsParserRuleCall_5_0 = (RuleCall)cControlDecisionsAssignment_5.eContents().get(0);
		private final Assignment cActionReatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionReatesExponentialRatesParserRuleCall_6_0 = (RuleCall)cActionReatesAssignment_6.eContents().get(0);
		private final Assignment cAddElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAddElementsAddAElementsParserRuleCall_7_0 = (RuleCall)cAddElementsAssignment_7.eContents().get(0);
		private final Assignment cHSFtypesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHSFtypesExpressionParserRuleCall_8_0 = (RuleCall)cHSFtypesAssignment_8.eContents().get(0);
		
		//AElementsBehaviorRoutines:
		//	{AElementsBehaviorRoutines} CollaborativeActions+=CColActions+
		//	CaolitionBinding+=attachCSs
		//	RemoveElements+=detachCSs
		//	ConnectElenents+=BindElements
		//	ControlDecisions+=ControlDecisions
		//	ActionReates+=ExponentialRates // Rate of Actions
		//	//localevents+=AElocalevents    // local events for processing IoTs / CPS nodes or any CSs actions: Actions not shared with other CSs
		//	AddElements+=AddAElements
		//	HSFtypes=Expression
		//	//|TransitionProbabilties+= ActionsProb / probablistic values could be assoicated with each action for CSs. 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AElementsBehaviorRoutines} CollaborativeActions+=CColActions+ CaolitionBinding+=attachCSs RemoveElements+=detachCSs
		//ConnectElenents+=BindElements ControlDecisions+=ControlDecisions ActionReates+=ExponentialRates // Rate of Actions
		////localevents+=AElocalevents    // local events for processing IoTs / CPS nodes or any CSs actions: Actions not shared with other CSs
		//AddElements+=AddAElements HSFtypes=Expression
		public Group getGroup() { return cGroup; }
		
		//{AElementsBehaviorRoutines}
		public Action getAElementsBehaviorRoutinesAction_0() { return cAElementsBehaviorRoutinesAction_0; }
		
		//CollaborativeActions+=CColActions+
		public Assignment getCollaborativeActionsAssignment_1() { return cCollaborativeActionsAssignment_1; }
		
		//CColActions
		public RuleCall getCollaborativeActionsCColActionsParserRuleCall_1_0() { return cCollaborativeActionsCColActionsParserRuleCall_1_0; }
		
		//CaolitionBinding+=attachCSs
		public Assignment getCaolitionBindingAssignment_2() { return cCaolitionBindingAssignment_2; }
		
		//attachCSs
		public RuleCall getCaolitionBindingAttachCSsParserRuleCall_2_0() { return cCaolitionBindingAttachCSsParserRuleCall_2_0; }
		
		//RemoveElements+=detachCSs
		public Assignment getRemoveElementsAssignment_3() { return cRemoveElementsAssignment_3; }
		
		//detachCSs
		public RuleCall getRemoveElementsDetachCSsParserRuleCall_3_0() { return cRemoveElementsDetachCSsParserRuleCall_3_0; }
		
		//ConnectElenents+=BindElements
		public Assignment getConnectElenentsAssignment_4() { return cConnectElenentsAssignment_4; }
		
		//BindElements
		public RuleCall getConnectElenentsBindElementsParserRuleCall_4_0() { return cConnectElenentsBindElementsParserRuleCall_4_0; }
		
		//ControlDecisions+=ControlDecisions
		public Assignment getControlDecisionsAssignment_5() { return cControlDecisionsAssignment_5; }
		
		//ControlDecisions
		public RuleCall getControlDecisionsControlDecisionsParserRuleCall_5_0() { return cControlDecisionsControlDecisionsParserRuleCall_5_0; }
		
		//ActionReates+=ExponentialRates
		public Assignment getActionReatesAssignment_6() { return cActionReatesAssignment_6; }
		
		//ExponentialRates
		public RuleCall getActionReatesExponentialRatesParserRuleCall_6_0() { return cActionReatesExponentialRatesParserRuleCall_6_0; }
		
		//// Rate of Actions
		////localevents+=AElocalevents    // local events for processing IoTs / CPS nodes or any CSs actions: Actions not shared with other CSs
		//AddElements+=AddAElements
		public Assignment getAddElementsAssignment_7() { return cAddElementsAssignment_7; }
		
		//AddAElements
		public RuleCall getAddElementsAddAElementsParserRuleCall_7_0() { return cAddElementsAddAElementsParserRuleCall_7_0; }
		
		//HSFtypes=Expression
		public Assignment getHSFtypesAssignment_8() { return cHSFtypesAssignment_8; }
		
		//Expression
		public RuleCall getHSFtypesExpressionParserRuleCall_8_0() { return cHSFtypesExpressionParserRuleCall_8_0; }
	}
	public class CColActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.CColActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollaborateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cParamsDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsDeclFormalParametersParserRuleCall_3_0 = (RuleCall)cParamsDeclAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMethodBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodBodyFunctinalityParserRuleCall_6_0 = (RuleCall)cMethodBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CColActions: // CollaborativeActions
		//	'Collaborate' name=ID type+=types paramsDecl+=formalParameters ('[' ']')* '{' methodBody+=functinality+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//// CollaborativeActions
		//'Collaborate' name=ID type+=types paramsDecl+=formalParameters ('[' ']')* '{' methodBody+=functinality+ '}'
		public Group getGroup() { return cGroup; }
		
		//// CollaborativeActions
		//'Collaborate'
		public Keyword getCollaborateKeyword_0() { return cCollaborateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type+=types
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//types
		public RuleCall getTypeTypesParserRuleCall_2_0() { return cTypeTypesParserRuleCall_2_0; }
		
		//paramsDecl+=formalParameters
		public Assignment getParamsDeclAssignment_3() { return cParamsDeclAssignment_3; }
		
		//formalParameters
		public RuleCall getParamsDeclFormalParametersParserRuleCall_3_0() { return cParamsDeclFormalParametersParserRuleCall_3_0; }
		
		//('[' ']')*
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_1() { return cRightSquareBracketKeyword_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//methodBody+=functinality+
		public Assignment getMethodBodyAssignment_6() { return cMethodBodyAssignment_6; }
		
		//functinality
		public RuleCall getMethodBodyFunctinalityParserRuleCall_6_0() { return cMethodBodyFunctinalityParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class FunctinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.functinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctinalityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsAElementsBehaviorRoutinesParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActionsFunctinalityCrossReference_2_0 = (CrossReference)cActionsAssignment_2.eContents().get(0);
		private final RuleCall cActionsFunctinalityIDTerminalRuleCall_2_0_1 = (RuleCall)cActionsFunctinalityCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetExponentialRatesCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetExponentialRatesIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetExponentialRatesCrossReference_4_0.eContents().get(1);
		
		//functinality:
		//	{functinality} functions+=AElementsBehaviorRoutines*
		//	Actions=[functinality] '.' target=[ExponentialRates];
		@Override public ParserRule getRule() { return rule; }
		
		//{functinality} functions+=AElementsBehaviorRoutines* Actions=[functinality] '.' target=[ExponentialRates]
		public Group getGroup() { return cGroup; }
		
		//{functinality}
		public Action getFunctinalityAction_0() { return cFunctinalityAction_0; }
		
		//functions+=AElementsBehaviorRoutines*
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }
		
		//AElementsBehaviorRoutines
		public RuleCall getFunctionsAElementsBehaviorRoutinesParserRuleCall_1_0() { return cFunctionsAElementsBehaviorRoutinesParserRuleCall_1_0; }
		
		//Actions=[functinality]
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//[functinality]
		public CrossReference getActionsFunctinalityCrossReference_2_0() { return cActionsFunctinalityCrossReference_2_0; }
		
		//ID
		public RuleCall getActionsFunctinalityIDTerminalRuleCall_2_0_1() { return cActionsFunctinalityIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//target=[ExponentialRates]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[ExponentialRates]
		public CrossReference getTargetExponentialRatesCrossReference_4_0() { return cTargetExponentialRatesCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetExponentialRatesIDTerminalRuleCall_4_0_1() { return cTargetExponentialRatesIDTerminalRuleCall_4_0_1; }
	}
	public class AddAElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.AddAElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAddAElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeIDTerminalRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AddAElements:
		//	{AddAElements}
		//	'instance' name=ID '=' 'new' type=ID '()' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{AddAElements} 'instance' name=ID '=' 'new' type=ID '()' ';'
		public Group getGroup() { return cGroup; }
		
		//{AddAElements}
		public Action getAddAElementsAction_0() { return cAddAElementsAction_0; }
		
		//'instance'
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//'new'
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }
		
		//type=ID
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_5_0() { return cTypeIDTerminalRuleCall_5_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_6() { return cLeftParenthesisRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class AttachCSsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.attachCSs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttachParam1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttachParam1ExpressionParserRuleCall_2_0 = (RuleCall)cAttachParam1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttachParam2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttachParam2ExpressionParserRuleCall_4_0 = (RuleCall)cAttachParam2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//attachCSs:
		//	'attach' '(' attachParam1+=Expression ',' attachParam2+=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'attach' '(' attachParam1+=Expression ',' attachParam2+=Expression ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'attach'
		public Keyword getAttachKeyword_0() { return cAttachKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//attachParam1+=Expression
		public Assignment getAttachParam1Assignment_2() { return cAttachParam1Assignment_2; }
		
		//Expression
		public RuleCall getAttachParam1ExpressionParserRuleCall_2_0() { return cAttachParam1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//attachParam2+=Expression
		public Assignment getAttachParam2Assignment_4() { return cAttachParam2Assignment_4; }
		
		//Expression
		public RuleCall getAttachParam2ExpressionParserRuleCall_4_0() { return cAttachParam2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class DetachCSsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.detachCSs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDetachCSsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDetachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDetachParam1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDetachParam1ExpressionParserRuleCall_3_0 = (RuleCall)cDetachParam1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDetachParam2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDetachParam2ExpressionParserRuleCall_5_0 = (RuleCall)cDetachParam2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//detachCSs:
		//	{detachCSs} 'detach' '(' detachParam1+=Expression ',' detachParam2+=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{detachCSs} 'detach' '(' detachParam1+=Expression ',' detachParam2+=Expression ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{detachCSs}
		public Action getDetachCSsAction_0() { return cDetachCSsAction_0; }
		
		//'detach'
		public Keyword getDetachKeyword_1() { return cDetachKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//detachParam1+=Expression
		public Assignment getDetachParam1Assignment_3() { return cDetachParam1Assignment_3; }
		
		//Expression
		public RuleCall getDetachParam1ExpressionParserRuleCall_3_0() { return cDetachParam1ExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//detachParam2+=Expression
		public Assignment getDetachParam2Assignment_5() { return cDetachParam2Assignment_5; }
		
		//Expression
		public RuleCall getDetachParam2ExpressionParserRuleCall_5_0() { return cDetachParam2ExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class BindElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.BindElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBindElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBindKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBindParam1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBindParam1ExpressionParserRuleCall_3_0 = (RuleCall)cBindParam1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBindParam2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBindParam2ExpressionParserRuleCall_5_0 = (RuleCall)cBindParam2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BindElements:
		//	{BindElements} 'bind' '(' bindParam1+=Expression ',' bindParam2+=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{BindElements} 'bind' '(' bindParam1+=Expression ',' bindParam2+=Expression ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{BindElements}
		public Action getBindElementsAction_0() { return cBindElementsAction_0; }
		
		//'bind'
		public Keyword getBindKeyword_1() { return cBindKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//bindParam1+=Expression
		public Assignment getBindParam1Assignment_3() { return cBindParam1Assignment_3; }
		
		//Expression
		public RuleCall getBindParam1ExpressionParserRuleCall_3_0() { return cBindParam1ExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//bindParam2+=Expression
		public Assignment getBindParam2Assignment_5() { return cBindParam2Assignment_5; }
		
		//Expression
		public RuleCall getBindParam2ExpressionParserRuleCall_5_0() { return cBindParam2ExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ControlDecisionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.ControlDecisions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlDecisionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionDeclAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionDeclAElementsBehaviorRoutinesParserRuleCall_3_1_0 = (RuleCall)cExpressionDeclAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cStatementDecl1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementDecl1AElementsBehaviorRoutinesParserRuleCall_4_0 = (RuleCall)cStatementDecl1Assignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOrKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cElseKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExpressionOrDeclAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cExpressionOrDeclAElementsBehaviorRoutinesParserRuleCall_6_2_1_0 = (RuleCall)cExpressionOrDeclAssignment_6_2_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Assignment cStatementDecl2Assignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cStatementDecl2AElementsBehaviorRoutinesParserRuleCall_6_3_0 = (RuleCall)cStatementDecl2Assignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIterateKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpressionOrDeclAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpressionOrDeclAElementsBehaviorRoutinesParserRuleCall_8_2_0 = (RuleCall)cExpressionOrDeclAssignment_8_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cStatementDecl2Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementDecl2AElementsBehaviorRoutinesParserRuleCall_9_0 = (RuleCall)cStatementDecl2Assignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ControlDecisions:
		//	{ControlDecisions}
		//	'Decide' '{' ('if' expressionDecl=AElementsBehaviorRoutines '=>')?
		//	statementDecl1+=AElementsBehaviorRoutines+ '}' ('or' '{' ('else' => expressionOrDecl+=AElementsBehaviorRoutines
		//	'=>')?
		//	statementDecl2+=AElementsBehaviorRoutines+ '}')*
		//	'end;' ('iterate' '{'
		//	=> expressionOrDecl+=AElementsBehaviorRoutines '=>')?
		//	statementDecl2+=AElementsBehaviorRoutines+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ControlDecisions} 'Decide' '{' ('if' expressionDecl=AElementsBehaviorRoutines '=>')?
		//statementDecl1+=AElementsBehaviorRoutines+ '}' ('or' '{' ('else' => expressionOrDecl+=AElementsBehaviorRoutines '=>')?
		//statementDecl2+=AElementsBehaviorRoutines+ '}')* 'end;' ('iterate' '{' => expressionOrDecl+=AElementsBehaviorRoutines
		//'=>')? statementDecl2+=AElementsBehaviorRoutines+ '}'
		public Group getGroup() { return cGroup; }
		
		//{ControlDecisions}
		public Action getControlDecisionsAction_0() { return cControlDecisionsAction_0; }
		
		//'Decide'
		public Keyword getDecideKeyword_1() { return cDecideKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('if' expressionDecl=AElementsBehaviorRoutines '=>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//expressionDecl=AElementsBehaviorRoutines
		public Assignment getExpressionDeclAssignment_3_1() { return cExpressionDeclAssignment_3_1; }
		
		//AElementsBehaviorRoutines
		public RuleCall getExpressionDeclAElementsBehaviorRoutinesParserRuleCall_3_1_0() { return cExpressionDeclAElementsBehaviorRoutinesParserRuleCall_3_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3_2() { return cEqualsSignGreaterThanSignKeyword_3_2; }
		
		//statementDecl1+=AElementsBehaviorRoutines+
		public Assignment getStatementDecl1Assignment_4() { return cStatementDecl1Assignment_4; }
		
		//AElementsBehaviorRoutines
		public RuleCall getStatementDecl1AElementsBehaviorRoutinesParserRuleCall_4_0() { return cStatementDecl1AElementsBehaviorRoutinesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//('or' '{' ('else' => expressionOrDecl+=AElementsBehaviorRoutines '=>')? statementDecl2+=AElementsBehaviorRoutines+ '}')*
		public Group getGroup_6() { return cGroup_6; }
		
		//'or'
		public Keyword getOrKeyword_6_0() { return cOrKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//('else' => expressionOrDecl+=AElementsBehaviorRoutines '=>')?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'else'
		public Keyword getElseKeyword_6_2_0() { return cElseKeyword_6_2_0; }
		
		//=> expressionOrDecl+=AElementsBehaviorRoutines
		public Assignment getExpressionOrDeclAssignment_6_2_1() { return cExpressionOrDeclAssignment_6_2_1; }
		
		//AElementsBehaviorRoutines
		public RuleCall getExpressionOrDeclAElementsBehaviorRoutinesParserRuleCall_6_2_1_0() { return cExpressionOrDeclAElementsBehaviorRoutinesParserRuleCall_6_2_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6_2_2() { return cEqualsSignGreaterThanSignKeyword_6_2_2; }
		
		//statementDecl2+=AElementsBehaviorRoutines+
		public Assignment getStatementDecl2Assignment_6_3() { return cStatementDecl2Assignment_6_3; }
		
		//AElementsBehaviorRoutines
		public RuleCall getStatementDecl2AElementsBehaviorRoutinesParserRuleCall_6_3_0() { return cStatementDecl2AElementsBehaviorRoutinesParserRuleCall_6_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'end;'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
		
		//('iterate' '{' => expressionOrDecl+=AElementsBehaviorRoutines '=>')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'iterate'
		public Keyword getIterateKeyword_8_0() { return cIterateKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//=> expressionOrDecl+=AElementsBehaviorRoutines
		public Assignment getExpressionOrDeclAssignment_8_2() { return cExpressionOrDeclAssignment_8_2; }
		
		//AElementsBehaviorRoutines
		public RuleCall getExpressionOrDeclAElementsBehaviorRoutinesParserRuleCall_8_2_0() { return cExpressionOrDeclAElementsBehaviorRoutinesParserRuleCall_8_2_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_8_3() { return cEqualsSignGreaterThanSignKeyword_8_3; }
		
		//statementDecl2+=AElementsBehaviorRoutines+
		public Assignment getStatementDecl2Assignment_9() { return cStatementDecl2Assignment_9; }
		
		//AElementsBehaviorRoutines
		public RuleCall getStatementDecl2AElementsBehaviorRoutinesParserRuleCall_9_0() { return cStatementDecl2AElementsBehaviorRoutinesParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ExponentialRatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.ExponentialRates");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExponentialRatesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTRateKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDelayValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDelayValueINTTerminalRuleCall_0_2_0 = (RuleCall)cDelayValueAssignment_0_2.eContents().get(0);
		private final Keyword cFullStopKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cExponentialRatesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExponentialRatesExpressionParserRuleCall_1_0 = (RuleCall)cExponentialRatesAssignment_1.eContents().get(0);
		
		//ExponentialRates:
		//	{ExponentialRates} 'TRate' delayValue=INT '.' INT ';' // Rate of Action
		//	| ExponentialRates=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExponentialRates} 'TRate' delayValue=INT '.' INT ';' // Rate of Action
		//| ExponentialRates=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExponentialRates} 'TRate' delayValue=INT '.' INT ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExponentialRates}
		public Action getExponentialRatesAction_0_0() { return cExponentialRatesAction_0_0; }
		
		//'TRate'
		public Keyword getTRateKeyword_0_1() { return cTRateKeyword_0_1; }
		
		//delayValue=INT
		public Assignment getDelayValueAssignment_0_2() { return cDelayValueAssignment_0_2; }
		
		//INT
		public RuleCall getDelayValueINTTerminalRuleCall_0_2_0() { return cDelayValueINTTerminalRuleCall_0_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_3() { return cFullStopKeyword_0_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_4() { return cINTTerminalRuleCall_0_4; }
		
		//';'
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }
		
		//ExponentialRates=Expression
		public Assignment getExponentialRatesAssignment_1() { return cExponentialRatesAssignment_1; }
		
		//Expression
		public RuleCall getExponentialRatesExpressionParserRuleCall_1_0() { return cExponentialRatesExpressionParserRuleCall_1_0; }
	}
	public class CConsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.CConsDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCConsDeclAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStochasticCconstraintsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAskconstraintsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAskconstraintsAskopeatorParserRuleCall_0_4_0 = (RuleCall)cAskconstraintsAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTellconstraintsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTellconstraintsTelloperatorParserRuleCall_1_0_0 = (RuleCall)cTellconstraintsAssignment_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		////AElocalevents: {AElocalevents}
		////'getdata' //used for CSs local data processing i.e. internal actions
		////| {AElocalevents} 'readdata'  //
		////| {AElocalevents} (Name=ID)?
		////; 
		//// writedata once read from local evnerionoments and store it for future communictation with other 	CSs. 
		//CConsDecl:
		//	{CConsDecl} // These set of Rules are for Concurrent Constraints with Random Rates
		//	'StochasticCconstraints' name=ID '{'
		//	Askconstraints+=Askopeator
		//	| Tellconstraints+=Telloperator
		//	//('Tell' '('ConstraintShareDate+=types '.' rate+=ExponentialRates ')')*
		//	//|  ('Ask' '('ConstraintData+=types '.' rate+=ExponentialRates ')')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CConsDecl} // These set of Rules are for Concurrent Constraints with Random Rates
		//'StochasticCconstraints' name=ID '{' Askconstraints+=Askopeator | Tellconstraints+=Telloperator //('Tell' '('ConstraintShareDate+=types '.' rate+=ExponentialRates ')')*
		////|  ('Ask' '('ConstraintData+=types '.' rate+=ExponentialRates ')')*
		//'}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CConsDecl} // These set of Rules are for Concurrent Constraints with Random Rates
		//'StochasticCconstraints' name=ID '{' Askconstraints+=Askopeator
		public Group getGroup_0() { return cGroup_0; }
		
		//{CConsDecl}
		public Action getCConsDeclAction_0_0() { return cCConsDeclAction_0_0; }
		
		//// These set of Rules are for Concurrent Constraints with Random Rates
		//'StochasticCconstraints'
		public Keyword getStochasticCconstraintsKeyword_0_1() { return cStochasticCconstraintsKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }
		
		//Askconstraints+=Askopeator
		public Assignment getAskconstraintsAssignment_0_4() { return cAskconstraintsAssignment_0_4; }
		
		//Askopeator
		public RuleCall getAskconstraintsAskopeatorParserRuleCall_0_4_0() { return cAskconstraintsAskopeatorParserRuleCall_0_4_0; }
		
		//Tellconstraints+=Telloperator //('Tell' '('ConstraintShareDate+=types '.' rate+=ExponentialRates ')')*
		////|  ('Ask' '('ConstraintData+=types '.' rate+=ExponentialRates ')')*
		//'}'
		public Group getGroup_1() { return cGroup_1; }
		
		//Tellconstraints+=Telloperator
		public Assignment getTellconstraintsAssignment_1_0() { return cTellconstraintsAssignment_1_0; }
		
		//Telloperator
		public RuleCall getTellconstraintsTelloperatorParserRuleCall_1_0_0() { return cTellconstraintsTelloperatorParserRuleCall_1_0_0; }
		
		////('Tell' '('ConstraintShareDate+=types '.' rate+=ExponentialRates ')')*
		////|  ('Ask' '('ConstraintData+=types '.' rate+=ExponentialRates ')')*
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}
	public class TelloperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.Telloperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTelloperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTellKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstraintShareDateAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstraintShareDateTypesParserRuleCall_1_2_0 = (RuleCall)cConstraintShareDateAssignment_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRateAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cRateExponentialRatesCrossReference_1_4_0 = (CrossReference)cRateAssignment_1_4.eContents().get(0);
		private final RuleCall cRateExponentialRatesIDTerminalRuleCall_1_4_0_1 = (RuleCall)cRateExponentialRatesCrossReference_1_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Telloperator:
		//	{Telloperator} ('Tell' '(' ConstraintShareDate=types '.' rate=[ExponentialRates] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{Telloperator} ('Tell' '(' ConstraintShareDate=types '.' rate=[ExponentialRates] ')')
		public Group getGroup() { return cGroup; }
		
		//{Telloperator}
		public Action getTelloperatorAction_0() { return cTelloperatorAction_0; }
		
		//('Tell' '(' ConstraintShareDate=types '.' rate=[ExponentialRates] ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'Tell'
		public Keyword getTellKeyword_1_0() { return cTellKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//ConstraintShareDate=types
		public Assignment getConstraintShareDateAssignment_1_2() { return cConstraintShareDateAssignment_1_2; }
		
		//types
		public RuleCall getConstraintShareDateTypesParserRuleCall_1_2_0() { return cConstraintShareDateTypesParserRuleCall_1_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_3() { return cFullStopKeyword_1_3; }
		
		//rate=[ExponentialRates]
		public Assignment getRateAssignment_1_4() { return cRateAssignment_1_4; }
		
		//[ExponentialRates]
		public CrossReference getRateExponentialRatesCrossReference_1_4_0() { return cRateExponentialRatesCrossReference_1_4_0; }
		
		//ID
		public RuleCall getRateExponentialRatesIDTerminalRuleCall_1_4_0_1() { return cRateExponentialRatesIDTerminalRuleCall_1_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class AskopeatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.Askopeator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAskopeatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstraintDataAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstraintDataTypesParserRuleCall_1_2_0 = (RuleCall)cConstraintDataAssignment_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRateAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cRateExponentialRatesCrossReference_1_4_0 = (CrossReference)cRateAssignment_1_4.eContents().get(0);
		private final RuleCall cRateExponentialRatesIDTerminalRuleCall_1_4_0_1 = (RuleCall)cRateExponentialRatesCrossReference_1_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Askopeator:
		//	{Askopeator} ('Ask' '(' ConstraintData=types '.' rate=[ExponentialRates] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{Askopeator} ('Ask' '(' ConstraintData=types '.' rate=[ExponentialRates] ')')
		public Group getGroup() { return cGroup; }
		
		//{Askopeator}
		public Action getAskopeatorAction_0() { return cAskopeatorAction_0; }
		
		//('Ask' '(' ConstraintData=types '.' rate=[ExponentialRates] ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'Ask'
		public Keyword getAskKeyword_1_0() { return cAskKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//ConstraintData=types
		public Assignment getConstraintDataAssignment_1_2() { return cConstraintDataAssignment_1_2; }
		
		//types
		public RuleCall getConstraintDataTypesParserRuleCall_1_2_0() { return cConstraintDataTypesParserRuleCall_1_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_3() { return cFullStopKeyword_1_3; }
		
		//rate=[ExponentialRates]
		public Assignment getRateAssignment_1_4() { return cRateAssignment_1_4; }
		
		//[ExponentialRates]
		public CrossReference getRateExponentialRatesCrossReference_1_4_0() { return cRateExponentialRatesCrossReference_1_4_0; }
		
		//ID
		public RuleCall getRateExponentialRatesIDTerminalRuleCall_1_4_0_1() { return cRateExponentialRatesIDTerminalRuleCall_1_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class TraitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.traitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortsProtDeclarationParserRuleCall_3_0 = (RuleCall)cPortsAssignment_3.eContents().get(0);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesMedRoleDeclarationParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Datatoinfer:
		////{Askfordata} 
		////;
		////sharedata:
		////{TellData}
		////;
		////traits 
		//traitDeclaration:
		//	'trait' name=ID '{'
		//	ports+=ProtDeclaration roles+=MedRoleDeclaration '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'trait' name=ID '{' ports+=ProtDeclaration roles+=MedRoleDeclaration '}'
		public Group getGroup() { return cGroup; }
		
		//'trait'
		public Keyword getTraitKeyword_0() { return cTraitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ports+=ProtDeclaration
		public Assignment getPortsAssignment_3() { return cPortsAssignment_3; }
		
		//ProtDeclaration
		public RuleCall getPortsProtDeclarationParserRuleCall_3_0() { return cPortsProtDeclarationParserRuleCall_3_0; }
		
		//roles+=MedRoleDeclaration
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }
		
		//MedRoleDeclaration
		public RuleCall getRolesMedRoleDeclarationParserRuleCall_4_0() { return cRolesMedRoleDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MedDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.MedDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMediatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMedRolesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMedRolesMedRoleDeclarationParserRuleCall_3_0 = (RuleCall)cMedRolesAssignment_3.eContents().get(0);
		private final Assignment cAActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAActionsAElementsBehaviorRoutinesParserRuleCall_4_0 = (RuleCall)cAActionsAssignment_4.eContents().get(0);
		private final Assignment cCSConConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCSConConstraintsCConsDeclParserRuleCall_5_0 = (RuleCall)cCSConConstraintsAssignment_5.eContents().get(0);
		private final Assignment cMedCoreBehaviorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMedCoreBehaviorStochsticBehaviorsParserRuleCall_6_0 = (RuleCall)cMedCoreBehaviorAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MedDecl:
		//	'Mediator' name=ID '{' // The mediators defintion and constraints
		//	MedRoles+=MedRoleDeclaration
		//	AActions+=AElementsBehaviorRoutines
		//	CSConConstraints+=CConsDecl
		//	MedCoreBehavior+=StochsticBehaviors*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mediator' name=ID '{' // The mediators defintion and constraints
		//MedRoles+=MedRoleDeclaration AActions+=AElementsBehaviorRoutines CSConConstraints+=CConsDecl
		//MedCoreBehavior+=StochsticBehaviors* '}'
		public Group getGroup() { return cGroup; }
		
		//'Mediator'
		public Keyword getMediatorKeyword_0() { return cMediatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//// The mediators defintion and constraints
		//MedRoles+=MedRoleDeclaration
		public Assignment getMedRolesAssignment_3() { return cMedRolesAssignment_3; }
		
		//MedRoleDeclaration
		public RuleCall getMedRolesMedRoleDeclarationParserRuleCall_3_0() { return cMedRolesMedRoleDeclarationParserRuleCall_3_0; }
		
		//AActions+=AElementsBehaviorRoutines
		public Assignment getAActionsAssignment_4() { return cAActionsAssignment_4; }
		
		//AElementsBehaviorRoutines
		public RuleCall getAActionsAElementsBehaviorRoutinesParserRuleCall_4_0() { return cAActionsAElementsBehaviorRoutinesParserRuleCall_4_0; }
		
		//CSConConstraints+=CConsDecl
		public Assignment getCSConConstraintsAssignment_5() { return cCSConConstraintsAssignment_5; }
		
		//CConsDecl
		public RuleCall getCSConConstraintsCConsDeclParserRuleCall_5_0() { return cCSConConstraintsCConsDeclParserRuleCall_5_0; }
		
		//MedCoreBehavior+=StochsticBehaviors*
		public Assignment getMedCoreBehaviorAssignment_6() { return cMedCoreBehaviorAssignment_6; }
		
		//StochsticBehaviors
		public RuleCall getMedCoreBehaviorStochsticBehaviorsParserRuleCall_6_0() { return cMedCoreBehaviorStochsticBehaviorsParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MedRoleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.MedRoleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMediationRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMediationRolesDefineMediationRolesParserRuleCall_0_0 = (RuleCall)cMediationRolesAssignment_0.eContents().get(0);
		private final Keyword cMed_RoleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MedRoleDeclaration:
		//	MediationRoles+=DefineMediationRoles 'Med_Role';
		@Override public ParserRule getRule() { return rule; }
		
		//MediationRoles+=DefineMediationRoles 'Med_Role'
		public Group getGroup() { return cGroup; }
		
		//MediationRoles+=DefineMediationRoles
		public Assignment getMediationRolesAssignment_0() { return cMediationRolesAssignment_0; }
		
		//DefineMediationRoles
		public RuleCall getMediationRolesDefineMediationRolesParserRuleCall_0_0() { return cMediationRolesDefineMediationRolesParserRuleCall_0_0; }
		
		//'Med_Role'
		public Keyword getMed_RoleKeyword_1() { return cMed_RoleKeyword_1; }
	}
	public class DefineMediationRolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.DefineMediationRoles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineMediationRolesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePortandRoleTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPubliicIntractionpointareAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPubliicIntractionpointarePublicinterfaeceDefCrossReference_2_0 = (CrossReference)cPubliicIntractionpointareAssignment_2.eContents().get(0);
		private final RuleCall cPubliicIntractionpointarePublicinterfaeceDefIDTerminalRuleCall_2_0_1 = (RuleCall)cPubliicIntractionpointarePublicinterfaeceDefCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//DefineMediationRoles:
		//	{DefineMediationRoles} type=portandRoleType
		//	PubliicIntractionpointare+=[publicinterfaeceDef] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefineMediationRoles} type=portandRoleType PubliicIntractionpointare+=[publicinterfaeceDef] name=ID
		public Group getGroup() { return cGroup; }
		
		//{DefineMediationRoles}
		public Action getDefineMediationRolesAction_0() { return cDefineMediationRolesAction_0; }
		
		//type=portandRoleType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//portandRoleType
		public RuleCall getTypePortandRoleTypeParserRuleCall_1_0() { return cTypePortandRoleTypeParserRuleCall_1_0; }
		
		//PubliicIntractionpointare+=[publicinterfaeceDef]
		public Assignment getPubliicIntractionpointareAssignment_2() { return cPubliicIntractionpointareAssignment_2; }
		
		//[publicinterfaeceDef]
		public CrossReference getPubliicIntractionpointarePublicinterfaeceDefCrossReference_2_0() { return cPubliicIntractionpointarePublicinterfaeceDefCrossReference_2_0; }
		
		//ID
		public RuleCall getPubliicIntractionpointarePublicinterfaeceDefIDTerminalRuleCall_2_0_1() { return cPubliicIntractionpointarePublicinterfaeceDefIDTerminalRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class AbsArchDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.AbsArchDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoS_Arch_CaolitonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSoSHasAEsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMediatorsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMediatorsMedDeclParserRuleCall_5_0 = (RuleCall)cMediatorsAssignment_5.eContents().get(0);
		private final Assignment cConstitientsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstitientsCSDeclParserRuleCall_6_0 = (RuleCall)cConstitientsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAbstractCoaltionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAbstractCoaltionAElementsBehaviorRoutinesParserRuleCall_8_0 = (RuleCall)cAbstractCoaltionAssignment_8.eContents().get(0);
		private final Assignment cGlobalPropsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cGlobalPropsGlobalPropertiesParserRuleCall_9_0 = (RuleCall)cGlobalPropsAssignment_9.eContents().get(0);
		
		//AbsArchDecl: // This is Stocahstic Abstract Architecture for SoS with CSs, connectors/mediators, compositional behaviors and constratins 
		//	'SoS_Arch_Caoliton' name=ID '{' 'SoS has AEs' '{' Mediators+=MedDecl Constitients+=CSDecl '}'
		//	AbstractCoaltion+=AElementsBehaviorRoutines GlobalProps+=GlobalProperties;
		@Override public ParserRule getRule() { return rule; }
		
		//// This is Stocahstic Abstract Architecture for SoS with CSs, connectors/mediators, compositional behaviors and constratins 
		//'SoS_Arch_Caoliton' name=ID '{' 'SoS has AEs' '{' Mediators+=MedDecl Constitients+=CSDecl '}'
		//AbstractCoaltion+=AElementsBehaviorRoutines GlobalProps+=GlobalProperties
		public Group getGroup() { return cGroup; }
		
		//// This is Stocahstic Abstract Architecture for SoS with CSs, connectors/mediators, compositional behaviors and constratins 
		//'SoS_Arch_Caoliton'
		public Keyword getSoS_Arch_CaolitonKeyword_0() { return cSoS_Arch_CaolitonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'SoS has AEs'
		public Keyword getSoSHasAEsKeyword_3() { return cSoSHasAEsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//Mediators+=MedDecl
		public Assignment getMediatorsAssignment_5() { return cMediatorsAssignment_5; }
		
		//MedDecl
		public RuleCall getMediatorsMedDeclParserRuleCall_5_0() { return cMediatorsMedDeclParserRuleCall_5_0; }
		
		//Constitients+=CSDecl
		public Assignment getConstitientsAssignment_6() { return cConstitientsAssignment_6; }
		
		//CSDecl
		public RuleCall getConstitientsCSDeclParserRuleCall_6_0() { return cConstitientsCSDeclParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//AbstractCoaltion+=AElementsBehaviorRoutines
		public Assignment getAbstractCoaltionAssignment_8() { return cAbstractCoaltionAssignment_8; }
		
		//AElementsBehaviorRoutines
		public RuleCall getAbstractCoaltionAElementsBehaviorRoutinesParserRuleCall_8_0() { return cAbstractCoaltionAElementsBehaviorRoutinesParserRuleCall_8_0; }
		
		//GlobalProps+=GlobalProperties
		public Assignment getGlobalPropsAssignment_9() { return cGlobalPropsAssignment_9; }
		
		//GlobalProperties
		public RuleCall getGlobalPropsGlobalPropertiesParserRuleCall_9_0() { return cGlobalPropsGlobalPropertiesParserRuleCall_9_0; }
	}
	public class GlobalPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.GlobalProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSoSPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyTypeTypesParserRuleCall_2_0 = (RuleCall)cPropertyTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttrinitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttrinitInitValsParserRuleCall_5_0 = (RuleCall)cAttrinitAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////AssertionDecl:
		////;
		//// These are the properties at SoS global architecture level for a particular configuration / coalition 
		//GlobalProperties:
		//	'{'
		//	'SoS-Properties'
		//	//'Property_Name' name=ID
		//	PropertyType=types name=ID '='
		//	attrinit=initVals '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'SoS-Properties' //'Property_Name' name=ID
		//PropertyType=types name=ID '=' attrinit=initVals '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'SoS-Properties'
		public Keyword getSoSPropertiesKeyword_1() { return cSoSPropertiesKeyword_1; }
		
		////'Property_Name' name=ID
		//PropertyType=types
		public Assignment getPropertyTypeAssignment_2() { return cPropertyTypeAssignment_2; }
		
		//types
		public RuleCall getPropertyTypeTypesParserRuleCall_2_0() { return cPropertyTypeTypesParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//attrinit=initVals
		public Assignment getAttrinitAssignment_5() { return cAttrinitAssignment_5; }
		
		//initVals
		public RuleCall getAttrinitInitValsParserRuleCall_5_0() { return cAttrinitInitValsParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStirngKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVoidKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//types:
		//	'stirng'
		//	| 'int'
		//	| 'float'
		//	| 'boolean'
		//	| 'type'
		//	| 'void';
		@Override public ParserRule getRule() { return rule; }
		
		//'stirng' | 'int' | 'float' | 'boolean' | 'type' | 'void'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'stirng'
		public Keyword getStirngKeyword_0() { return cStirngKeyword_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//'boolean'
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//'void'
		public Keyword getVoidKeyword_5() { return cVoidKeyword_5; }
	}
	public class InitValsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.initVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInitValsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInitValsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInitValsAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//initVals:
		//	{initVals} STRING
		//	| {initVals} INT
		//	| FLOAT
		//	| {initVals} Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//{initVals} STRING | {initVals} INT | FLOAT | {initVals} Boolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{initVals} STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{initVals}
		public Action getInitValsAction_0_0() { return cInitValsAction_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }
		
		//{initVals} INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{initVals}
		public Action getInitValsAction_1_0() { return cInitValsAction_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_2() { return cFLOATParserRuleCall_2; }
		
		//{initVals} Boolean
		public Group getGroup_3() { return cGroup_3; }
		
		//{initVals}
		public Action getInitValsAction_3_0() { return cInitValsAction_3_0; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_3_1() { return cBooleanParserRuleCall_3_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT:
		//	value=INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.Expression");
		private final RuleCall cLogicalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// logical expressions termail rules adopted from the existing grammars consulted from PiADL and classic process algbriac rules for expressions. 
		//Expression:
		//	LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall() { return cLogicalExpressionParserRuleCall; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalExpression Expression:
		//	EqualityExpression ({LogicalExpression.left=current} op=('||' | '&&') right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({LogicalExpression.left=current} op=('||' | '&&') right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({LogicalExpression.left=current} op=('||' | '&&') right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpression.left=current}
		public Action getLogicalExpressionLeftAction_1_0() { return cLogicalExpressionLeftAction_1_0; }
		
		//op=('||' | '&&')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('||' | '&&')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_1() { return cOpAmpersandAmpersandKeyword_1_1_0_1; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression Expression:
		//	RelationalExpression ({EqualityExpression.left=current} op=('==' | '!=') right=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({EqualityExpression.left=current} op=('==' | '!=') right=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} op=('==' | '!=') right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression Expression:
		//	ArithmeticExpression ({RelationalExpression.left=current} op=('>=' | '<=' | '>' | '<') right=ArithmeticExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpression ({RelationalExpression.left=current} op=('>=' | '<=' | '>' | '<') right=ArithmeticExpression)*
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }
		
		//({RelationalExpression.left=current} op=('>=' | '<=' | '>' | '<') right=ArithmeticExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalExpression.left=current}
		public Action getRelationalExpressionLeftAction_1_0() { return cRelationalExpressionLeftAction_1_0; }
		
		//op=('>=' | '<=' | '>' | '<')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '>' | '<')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_1_2_0() { return cRightArithmeticExpressionParserRuleCall_1_2_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.ArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusOperationLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cOpAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ArithmeticExpression Expression:
		//	Term (({SumOperation.left=current} op='+' | {MinusOperation.left=current} op='-') right=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Term (({SumOperation.left=current} op='+' | {MinusOperation.left=current} op='-') right=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//(({SumOperation.left=current} op='+' | {MinusOperation.left=current} op='-') right=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({SumOperation.left=current} op='+' | {MinusOperation.left=current} op='-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{SumOperation.left=current} op='+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{SumOperation.left=current}
		public Action getSumOperationLeftAction_1_0_0_0() { return cSumOperationLeftAction_1_0_0_0; }
		
		//op='+'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0() { return cOpPlusSignKeyword_1_0_0_1_0; }
		
		//{MinusOperation.left=current} op='-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{MinusOperation.left=current}
		public Action getMinusOperationLeftAction_1_0_1_0() { return cMinusOperationLeftAction_1_0_1_0; }
		
		//op='-'
		public Assignment getOpAssignment_1_0_1_1() { return cOpAssignment_1_0_1_1; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_1_1_0() { return cOpHyphenMinusKeyword_1_0_1_1_0; }
		
		//right=Term
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Term
		public RuleCall getRightTermParserRuleCall_1_1_0() { return cRightTermParserRuleCall_1_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpModKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Term Expression:
		//	Factor ({Term.left=current} op=('*' | '/' | 'mod') right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Term.left=current} op=('*' | '/' | 'mod') right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Term.left=current} op=('*' | '/' | 'mod') right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }
		
		//op=('*' | '/' | 'mod')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | 'mod')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'mod'
		public Keyword getOpModKeyword_1_1_0_2() { return cOpModKeyword_1_1_0_2; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtomicElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Factor Expression:
		//	'(' Expression ')' | UnaryExpression | AtomicElement;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | UnaryExpression | AtomicElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1() { return cUnaryExpressionParserRuleCall_1; }
		
		//AtomicElement
		public RuleCall getAtomicElementParserRuleCall_2() { return cAtomicElementParserRuleCall_2; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNegationExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionAtomicElementParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//UnaryExpression Expression:
		//	{NegationExpression} => '!' expression=AtomicElement;
		@Override public ParserRule getRule() { return rule; }
		
		//{NegationExpression} => '!' expression=AtomicElement
		public Group getGroup() { return cGroup; }
		
		//{NegationExpression}
		public Action getNegationExpressionAction_0() { return cNegationExpressionAction_0; }
		
		//=> '!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//expression=AtomicElement
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//AtomicElement
		public RuleCall getExpressionAtomicElementParserRuleCall_2_0() { return cExpressionAtomicElementParserRuleCall_2_0; }
	}
	public class AtomicElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.AtomicElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		
		//AtomicElement Expression:
		//	LiteralElement | {VariableRef} variable=ID
		//	//| {CallRef} calledElement=ID ('.'next+=ID)* ( '(' ( ('.')? nextArg+=ID)* ')' ) 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralElement | {VariableRef} variable=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralElement
		public RuleCall getLiteralElementParserRuleCall_0() { return cLiteralElementParserRuleCall_0; }
		
		//{VariableRef} variable=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableRef}
		public Action getVariableRefAction_1_0() { return cVariableRefAction_1_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_1_0() { return cVariableIDTerminalRuleCall_1_1_0; }
	}
	public class LiteralElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.LiteralElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LiteralElement Expression:
		//	IntegerLiteral | RealLiteral | StringLiteral | BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerLiteral | RealLiteral | StringLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerLiteral Expression:
		//	{IntegerLiteral} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerLiteral} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerLiteral}
		public Action getIntegerLiteralAction_0() { return cIntegerLiteralAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealLiteral Expression:
		//	{RealLiteral} value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//{RealLiteral} value=FLOAT
		public Group getGroup() { return cGroup; }
		
		//{RealLiteral}
		public Action getRealLiteralAction_0() { return cRealLiteralAction_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_1_0() { return cValueFLOATParserRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral Expression:
		//	{StringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sosModeling.archModeling.SFDSL.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BooleanLiteral Expression:
		//	{BooleanLiteral} value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanLiteral} value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_1_0_1() { return cValueFalseKeyword_1_0_1; }
	}
	
	
	private final StochasticModelingElements pStochasticModeling;
	private final ModelElementsDecarationElements pModelElementsDecaration;
	private final CSDeclElements pCSDecl;
	private final CSMembersDefintionElements pCSMembersDefintion;
	private final StochsticBehaviorsElements pStochsticBehaviors;
	private final PortandRoleTypeElements pPortandRoleType;
	private final PublicinterfaeceDefElements pPublicinterfaeceDef;
	private final FormalParametersElements pFormalParameters;
	private final FormalParameterListElements pFormalParameterList;
	private final FormalParameterElements pFormalParameter;
	private final VariableDeclaratorIdElements pVariableDeclaratorId;
	private final ProtDeclarationElements pProtDeclaration;
	private final QualifiedNameElements pQualifiedName;
	private final AElementsBehaviorRoutinesElements pAElementsBehaviorRoutines;
	private final CColActionsElements pCColActions;
	private final FunctinalityElements pFunctinality;
	private final AddAElementsElements pAddAElements;
	private final AttachCSsElements pAttachCSs;
	private final DetachCSsElements pDetachCSs;
	private final BindElementsElements pBindElements;
	private final ControlDecisionsElements pControlDecisions;
	private final ExponentialRatesElements pExponentialRates;
	private final CConsDeclElements pCConsDecl;
	private final TelloperatorElements pTelloperator;
	private final AskopeatorElements pAskopeator;
	private final TraitDeclarationElements pTraitDeclaration;
	private final MedDeclElements pMedDecl;
	private final MedRoleDeclarationElements pMedRoleDeclaration;
	private final DefineMediationRolesElements pDefineMediationRoles;
	private final AbsArchDeclElements pAbsArchDecl;
	private final GlobalPropertiesElements pGlobalProperties;
	private final TypesElements pTypes;
	private final InitValsElements pInitVals;
	private final BooleanElements pBoolean;
	private final FLOATElements pFLOAT;
	private final ExpressionElements pExpression;
	private final LogicalExpressionElements pLogicalExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final UnaryExpressionElements pUnaryExpression;
	private final AtomicElementElements pAtomicElement;
	private final LiteralElementElements pLiteralElement;
	private final IntegerLiteralElements pIntegerLiteral;
	private final RealLiteralElements pRealLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SFDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStochasticModeling = new StochasticModelingElements();
		this.pModelElementsDecaration = new ModelElementsDecarationElements();
		this.pCSDecl = new CSDeclElements();
		this.pCSMembersDefintion = new CSMembersDefintionElements();
		this.pStochsticBehaviors = new StochsticBehaviorsElements();
		this.pPortandRoleType = new PortandRoleTypeElements();
		this.pPublicinterfaeceDef = new PublicinterfaeceDefElements();
		this.pFormalParameters = new FormalParametersElements();
		this.pFormalParameterList = new FormalParameterListElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pVariableDeclaratorId = new VariableDeclaratorIdElements();
		this.pProtDeclaration = new ProtDeclarationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pAElementsBehaviorRoutines = new AElementsBehaviorRoutinesElements();
		this.pCColActions = new CColActionsElements();
		this.pFunctinality = new FunctinalityElements();
		this.pAddAElements = new AddAElementsElements();
		this.pAttachCSs = new AttachCSsElements();
		this.pDetachCSs = new DetachCSsElements();
		this.pBindElements = new BindElementsElements();
		this.pControlDecisions = new ControlDecisionsElements();
		this.pExponentialRates = new ExponentialRatesElements();
		this.pCConsDecl = new CConsDeclElements();
		this.pTelloperator = new TelloperatorElements();
		this.pAskopeator = new AskopeatorElements();
		this.pTraitDeclaration = new TraitDeclarationElements();
		this.pMedDecl = new MedDeclElements();
		this.pMedRoleDeclaration = new MedRoleDeclarationElements();
		this.pDefineMediationRoles = new DefineMediationRolesElements();
		this.pAbsArchDecl = new AbsArchDeclElements();
		this.pGlobalProperties = new GlobalPropertiesElements();
		this.pTypes = new TypesElements();
		this.pInitVals = new InitValsElements();
		this.pBoolean = new BooleanElements();
		this.pFLOAT = new FLOATElements();
		this.pExpression = new ExpressionElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pAtomicElement = new AtomicElementElements();
		this.pLiteralElement = new LiteralElementElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.sosModeling.archModeling.SFDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StochasticModeling:
	//	StochasticModelElements+=ModelElementsDecaration;
	public StochasticModelingElements getStochasticModelingAccess() {
		return pStochasticModeling;
	}
	
	public ParserRule getStochasticModelingRule() {
		return getStochasticModelingAccess().getRule();
	}
	
	//ModelElementsDecaration:
	//	{ModelElementsDecaration} AbstractArchModel+=AbsArchDecl*
	//	ConstiuenetSystemSDesign+=CSDecl*
	//	MediatorDesign+=MedDecl*
	//	ConcurrentConstraints+=CConsDecl*
	//	ArchitecutreElementsBehaviors+=AElementsBehaviorRoutines*
	//	'ModelElements' name=QualifiedName
	//	Interfce+=publicinterfaeceDef
	//	ArchTraits+=traitDeclaration*
	//	// Terminal Rules Architecture Coalition Constraints related to Performance, Reliability and Security 
	//;
	public ModelElementsDecarationElements getModelElementsDecarationAccess() {
		return pModelElementsDecaration;
	}
	
	public ParserRule getModelElementsDecarationRule() {
		return getModelElementsDecarationAccess().getRule();
	}
	
	//// CSDESIGN DEFINTION 
	//CSDecl: // later add  parameters list at decleation time, considering rates of actions and concurrent constraints
	//	'Constituient-System' name=ID '{' CSDesignConsists+=CSMembersDefintion '}' //('[protocol' '{' assertions+=AssertionDecl+ '}')? // shall decide to inculde in CS behavior Defintion or not
	//;
	public CSDeclElements getCSDeclAccess() {
		return pCSDecl;
	}
	
	public ParserRule getCSDeclRule() {
		return getCSDeclAccess().getRule();
	}
	
	//CSMembersDefintion:
	//	Ports+=ProtDeclaration AActions+=AElementsBehaviorRoutines CSConConstraints+=CConsDecl?
	//	CSCoreBehavior+=StochsticBehaviors* // added for must have behaviros 
	//;
	public CSMembersDefintionElements getCSMembersDefintionAccess() {
		return pCSMembersDefintion;
	}
	
	public ParserRule getCSMembersDefintionRule() {
		return getCSMembersDefintionAccess().getRule();
	}
	
	//StochsticBehaviors: // Actual behavior of CS when written HSF- DSL at instance 
	//// Behavior is made of {     
	//// A required service to constituent system -->  void Received (Type data) {
	//// and then privoided services  --> sent (): Both are embeeded into  AElementsBehaviorRoutines
	//	'CSbehaviorsis' 'functinoalaity' type=types name=ID paramsDecl=formalParameters ('[' ']')* '{'
	//	functions+=AElementsBehaviorRoutines '}';
	public StochsticBehaviorsElements getStochsticBehaviorsAccess() {
		return pStochsticBehaviors;
	}
	
	public ParserRule getStochsticBehaviorsRule() {
		return getStochsticBehaviorsAccess().getRule();
	}
	
	//portandRoleType:
	//	'provides' | 'requires';
	public PortandRoleTypeElements getPortandRoleTypeAccess() {
		return pPortandRoleType;
	}
	
	public ParserRule getPortandRoleTypeRule() {
		return getPortandRoleTypeAccess().getRule();
	}
	
	////provides:
	////name=ID
	////;
	////requires:
	////name=ID
	////;
	//publicinterfaeceDef: // interface signatures 
	//	'PublicInteface' Name=ID '{' //'functionality' Name= ID
	//	paramsDecl=formalParameters ('[' ']')* ';';
	public PublicinterfaeceDefElements getPublicinterfaeceDefAccess() {
		return pPublicinterfaeceDef;
	}
	
	public ParserRule getPublicinterfaeceDefRule() {
		return getPublicinterfaeceDefAccess().getRule();
	}
	
	//formalParameters:
	//	{formalParameters} '(' paramsDecl+=formalParameterList? ')';
	public FormalParametersElements getFormalParametersAccess() {
		return pFormalParameters;
	}
	
	public ParserRule getFormalParametersRule() {
		return getFormalParametersAccess().getRule();
	}
	
	//formalParameterList:
	//	paramDecl=formalParameter ',' paramsDecl+=formalParameter*;
	public FormalParameterListElements getFormalParameterListAccess() {
		return pFormalParameterList;
	}
	
	public ParserRule getFormalParameterListRule() {
		return getFormalParameterListAccess().getRule();
	}
	
	//formalParameter:
	//	type=types name=variableDeclaratorId;
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}
	
	//variableDeclaratorId:
	//	name=ID ('[' ']')*
	//	'}';
	public VariableDeclaratorIdElements getVariableDeclaratorIdAccess() {
		return pVariableDeclaratorId;
	}
	
	public ParserRule getVariableDeclaratorIdRule() {
		return getVariableDeclaratorIdAccess().getRule();
	}
	
	//ProtDeclaration:
	//	{ProtDeclaration} porttype=portandRoleType 'port'
	//	PubliicIntractionpointare=[publicinterfaeceDef] name=ID;
	public ProtDeclarationElements getProtDeclarationAccess() {
		return pProtDeclaration;
	}
	
	public ParserRule getProtDeclarationRule() {
		return getProtDeclarationAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID*);
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//AElementsBehaviorRoutines:
	//	{AElementsBehaviorRoutines} CollaborativeActions+=CColActions+
	//	CaolitionBinding+=attachCSs
	//	RemoveElements+=detachCSs
	//	ConnectElenents+=BindElements
	//	ControlDecisions+=ControlDecisions
	//	ActionReates+=ExponentialRates // Rate of Actions
	//	//localevents+=AElocalevents    // local events for processing IoTs / CPS nodes or any CSs actions: Actions not shared with other CSs
	//	AddElements+=AddAElements
	//	HSFtypes=Expression
	//	//|TransitionProbabilties+= ActionsProb / probablistic values could be assoicated with each action for CSs. 
	//;
	public AElementsBehaviorRoutinesElements getAElementsBehaviorRoutinesAccess() {
		return pAElementsBehaviorRoutines;
	}
	
	public ParserRule getAElementsBehaviorRoutinesRule() {
		return getAElementsBehaviorRoutinesAccess().getRule();
	}
	
	//CColActions: // CollaborativeActions
	//	'Collaborate' name=ID type+=types paramsDecl+=formalParameters ('[' ']')* '{' methodBody+=functinality+ '}';
	public CColActionsElements getCColActionsAccess() {
		return pCColActions;
	}
	
	public ParserRule getCColActionsRule() {
		return getCColActionsAccess().getRule();
	}
	
	//functinality:
	//	{functinality} functions+=AElementsBehaviorRoutines*
	//	Actions=[functinality] '.' target=[ExponentialRates];
	public FunctinalityElements getFunctinalityAccess() {
		return pFunctinality;
	}
	
	public ParserRule getFunctinalityRule() {
		return getFunctinalityAccess().getRule();
	}
	
	//AddAElements:
	//	{AddAElements}
	//	'instance' name=ID '=' 'new' type=ID '()' ';';
	public AddAElementsElements getAddAElementsAccess() {
		return pAddAElements;
	}
	
	public ParserRule getAddAElementsRule() {
		return getAddAElementsAccess().getRule();
	}
	
	//attachCSs:
	//	'attach' '(' attachParam1+=Expression ',' attachParam2+=Expression ')' ';';
	public AttachCSsElements getAttachCSsAccess() {
		return pAttachCSs;
	}
	
	public ParserRule getAttachCSsRule() {
		return getAttachCSsAccess().getRule();
	}
	
	//detachCSs:
	//	{detachCSs} 'detach' '(' detachParam1+=Expression ',' detachParam2+=Expression ')' ';';
	public DetachCSsElements getDetachCSsAccess() {
		return pDetachCSs;
	}
	
	public ParserRule getDetachCSsRule() {
		return getDetachCSsAccess().getRule();
	}
	
	//BindElements:
	//	{BindElements} 'bind' '(' bindParam1+=Expression ',' bindParam2+=Expression ')' ';';
	public BindElementsElements getBindElementsAccess() {
		return pBindElements;
	}
	
	public ParserRule getBindElementsRule() {
		return getBindElementsAccess().getRule();
	}
	
	//ControlDecisions:
	//	{ControlDecisions}
	//	'Decide' '{' ('if' expressionDecl=AElementsBehaviorRoutines '=>')?
	//	statementDecl1+=AElementsBehaviorRoutines+ '}' ('or' '{' ('else' => expressionOrDecl+=AElementsBehaviorRoutines
	//	'=>')?
	//	statementDecl2+=AElementsBehaviorRoutines+ '}')*
	//	'end;' ('iterate' '{'
	//	=> expressionOrDecl+=AElementsBehaviorRoutines '=>')?
	//	statementDecl2+=AElementsBehaviorRoutines+ '}';
	public ControlDecisionsElements getControlDecisionsAccess() {
		return pControlDecisions;
	}
	
	public ParserRule getControlDecisionsRule() {
		return getControlDecisionsAccess().getRule();
	}
	
	//ExponentialRates:
	//	{ExponentialRates} 'TRate' delayValue=INT '.' INT ';' // Rate of Action
	//	| ExponentialRates=Expression;
	public ExponentialRatesElements getExponentialRatesAccess() {
		return pExponentialRates;
	}
	
	public ParserRule getExponentialRatesRule() {
		return getExponentialRatesAccess().getRule();
	}
	
	////AElocalevents: {AElocalevents}
	////'getdata' //used for CSs local data processing i.e. internal actions
	////| {AElocalevents} 'readdata'  //
	////| {AElocalevents} (Name=ID)?
	////; 
	//// writedata once read from local evnerionoments and store it for future communictation with other 	CSs. 
	//CConsDecl:
	//	{CConsDecl} // These set of Rules are for Concurrent Constraints with Random Rates
	//	'StochasticCconstraints' name=ID '{'
	//	Askconstraints+=Askopeator
	//	| Tellconstraints+=Telloperator
	//	//('Tell' '('ConstraintShareDate+=types '.' rate+=ExponentialRates ')')*
	//	//|  ('Ask' '('ConstraintData+=types '.' rate+=ExponentialRates ')')*
	//	'}';
	public CConsDeclElements getCConsDeclAccess() {
		return pCConsDecl;
	}
	
	public ParserRule getCConsDeclRule() {
		return getCConsDeclAccess().getRule();
	}
	
	//Telloperator:
	//	{Telloperator} ('Tell' '(' ConstraintShareDate=types '.' rate=[ExponentialRates] ')');
	public TelloperatorElements getTelloperatorAccess() {
		return pTelloperator;
	}
	
	public ParserRule getTelloperatorRule() {
		return getTelloperatorAccess().getRule();
	}
	
	//Askopeator:
	//	{Askopeator} ('Ask' '(' ConstraintData=types '.' rate=[ExponentialRates] ')');
	public AskopeatorElements getAskopeatorAccess() {
		return pAskopeator;
	}
	
	public ParserRule getAskopeatorRule() {
		return getAskopeatorAccess().getRule();
	}
	
	////Datatoinfer:
	////{Askfordata} 
	////;
	////sharedata:
	////{TellData}
	////;
	////traits 
	//traitDeclaration:
	//	'trait' name=ID '{'
	//	ports+=ProtDeclaration roles+=MedRoleDeclaration '}';
	public TraitDeclarationElements getTraitDeclarationAccess() {
		return pTraitDeclaration;
	}
	
	public ParserRule getTraitDeclarationRule() {
		return getTraitDeclarationAccess().getRule();
	}
	
	//MedDecl:
	//	'Mediator' name=ID '{' // The mediators defintion and constraints
	//	MedRoles+=MedRoleDeclaration
	//	AActions+=AElementsBehaviorRoutines
	//	CSConConstraints+=CConsDecl
	//	MedCoreBehavior+=StochsticBehaviors*
	//	'}';
	public MedDeclElements getMedDeclAccess() {
		return pMedDecl;
	}
	
	public ParserRule getMedDeclRule() {
		return getMedDeclAccess().getRule();
	}
	
	//MedRoleDeclaration:
	//	MediationRoles+=DefineMediationRoles 'Med_Role';
	public MedRoleDeclarationElements getMedRoleDeclarationAccess() {
		return pMedRoleDeclaration;
	}
	
	public ParserRule getMedRoleDeclarationRule() {
		return getMedRoleDeclarationAccess().getRule();
	}
	
	//DefineMediationRoles:
	//	{DefineMediationRoles} type=portandRoleType
	//	PubliicIntractionpointare+=[publicinterfaeceDef] name=ID;
	public DefineMediationRolesElements getDefineMediationRolesAccess() {
		return pDefineMediationRoles;
	}
	
	public ParserRule getDefineMediationRolesRule() {
		return getDefineMediationRolesAccess().getRule();
	}
	
	//AbsArchDecl: // This is Stocahstic Abstract Architecture for SoS with CSs, connectors/mediators, compositional behaviors and constratins 
	//	'SoS_Arch_Caoliton' name=ID '{' 'SoS has AEs' '{' Mediators+=MedDecl Constitients+=CSDecl '}'
	//	AbstractCoaltion+=AElementsBehaviorRoutines GlobalProps+=GlobalProperties;
	public AbsArchDeclElements getAbsArchDeclAccess() {
		return pAbsArchDecl;
	}
	
	public ParserRule getAbsArchDeclRule() {
		return getAbsArchDeclAccess().getRule();
	}
	
	////AssertionDecl:
	////;
	//// These are the properties at SoS global architecture level for a particular configuration / coalition 
	//GlobalProperties:
	//	'{'
	//	'SoS-Properties'
	//	//'Property_Name' name=ID
	//	PropertyType=types name=ID '='
	//	attrinit=initVals '}';
	public GlobalPropertiesElements getGlobalPropertiesAccess() {
		return pGlobalProperties;
	}
	
	public ParserRule getGlobalPropertiesRule() {
		return getGlobalPropertiesAccess().getRule();
	}
	
	//types:
	//	'stirng'
	//	| 'int'
	//	| 'float'
	//	| 'boolean'
	//	| 'type'
	//	| 'void';
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//initVals:
	//	{initVals} STRING
	//	| {initVals} INT
	//	| FLOAT
	//	| {initVals} Boolean;
	public InitValsElements getInitValsAccess() {
		return pInitVals;
	}
	
	public ParserRule getInitValsRule() {
		return getInitValsAccess().getRule();
	}
	
	//Boolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//FLOAT:
	//	value=INT '.' INT;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//// logical expressions termail rules adopted from the existing grammars consulted from PiADL and classic process algbriac rules for expressions. 
	//Expression:
	//	LogicalExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LogicalExpression Expression:
	//	EqualityExpression ({LogicalExpression.left=current} op=('||' | '&&') right=EqualityExpression)*;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	RelationalExpression ({EqualityExpression.left=current} op=('==' | '!=') right=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	ArithmeticExpression ({RelationalExpression.left=current} op=('>=' | '<=' | '>' | '<') right=ArithmeticExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ArithmeticExpression Expression:
	//	Term (({SumOperation.left=current} op='+' | {MinusOperation.left=current} op='-') right=Term)*;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//Term Expression:
	//	Factor ({Term.left=current} op=('*' | '/' | 'mod') right=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor Expression:
	//	'(' Expression ')' | UnaryExpression | AtomicElement;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	{NegationExpression} => '!' expression=AtomicElement;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//AtomicElement Expression:
	//	LiteralElement | {VariableRef} variable=ID
	//	//| {CallRef} calledElement=ID ('.'next+=ID)* ( '(' ( ('.')? nextArg+=ID)* ')' ) 
	//;
	public AtomicElementElements getAtomicElementAccess() {
		return pAtomicElement;
	}
	
	public ParserRule getAtomicElementRule() {
		return getAtomicElementAccess().getRule();
	}
	
	//LiteralElement Expression:
	//	IntegerLiteral | RealLiteral | StringLiteral | BooleanLiteral;
	public LiteralElementElements getLiteralElementAccess() {
		return pLiteralElement;
	}
	
	public ParserRule getLiteralElementRule() {
		return getLiteralElementAccess().getRule();
	}
	
	//IntegerLiteral Expression:
	//	{IntegerLiteral} value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//RealLiteral Expression:
	//	{RealLiteral} value=FLOAT;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//StringLiteral Expression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//BooleanLiteral Expression:
	//	{BooleanLiteral} value=('true' | 'false');
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
