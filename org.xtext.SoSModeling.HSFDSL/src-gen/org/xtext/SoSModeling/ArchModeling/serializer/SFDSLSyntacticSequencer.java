/*
 * generated by Xtext 2.19.0
 */
package org.xtext.sosModeling.archModeling.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.sosModeling.archModeling.services.SFDSLGrammarAccess;

@SuppressWarnings("all")
public class SFDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SFDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CColActions___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a;
	protected AbstractElementAlias match_ControlDecisions___RightCurlyBracketKeyword_6_4_OrKeyword_6_0_LeftCurlyBracketKeyword_6_1__q;
	protected AbstractElementAlias match_Factor_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Factor_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_StochsticBehaviors___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__a;
	protected AbstractElementAlias match_initVals_BooleanParserRuleCall_3_1_or_INTTerminalRuleCall_1_1_or_STRINGTerminalRuleCall_0_1;
	protected AbstractElementAlias match_publicinterfaeceDef___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a;
	protected AbstractElementAlias match_variableDeclaratorId___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SFDSLGrammarAccess) access;
		match_CColActions___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCColActionsAccess().getLeftSquareBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getCColActionsAccess().getRightSquareBracketKeyword_4_1()));
		match_ControlDecisions___RightCurlyBracketKeyword_6_4_OrKeyword_6_0_LeftCurlyBracketKeyword_6_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getControlDecisionsAccess().getRightCurlyBracketKeyword_6_4()), new TokenAlias(false, false, grammarAccess.getControlDecisionsAccess().getOrKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getControlDecisionsAccess().getLeftCurlyBracketKeyword_6_1()));
		match_Factor_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0());
		match_Factor_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0());
		match_StochsticBehaviors___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getStochsticBehaviorsAccess().getLeftSquareBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getStochsticBehaviorsAccess().getRightSquareBracketKeyword_5_1()));
		match_initVals_BooleanParserRuleCall_3_1_or_INTTerminalRuleCall_1_1_or_STRINGTerminalRuleCall_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInitValsAccess().getBooleanParserRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getInitValsAccess().getINTTerminalRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getInitValsAccess().getSTRINGTerminalRuleCall_0_1()));
		match_publicinterfaeceDef___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPublicinterfaeceDefAccess().getLeftSquareBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getPublicinterfaeceDefAccess().getRightSquareBracketKeyword_4_1()));
		match_variableDeclaratorId___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getVariableDeclaratorIdAccess().getLeftSquareBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getVariableDeclaratorIdAccess().getRightSquareBracketKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBooleanRule())
			return getBooleanToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Boolean:
	 * 'true' | 'false';
	 */
	protected String getBooleanToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CColActions___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a.equals(syntax))
				emit_CColActions___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ControlDecisions___RightCurlyBracketKeyword_6_4_OrKeyword_6_0_LeftCurlyBracketKeyword_6_1__q.equals(syntax))
				emit_ControlDecisions___RightCurlyBracketKeyword_6_4_OrKeyword_6_0_LeftCurlyBracketKeyword_6_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Factor_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Factor_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StochsticBehaviors___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__a.equals(syntax))
				emit_StochsticBehaviors___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_initVals_BooleanParserRuleCall_3_1_or_INTTerminalRuleCall_1_1_or_STRINGTerminalRuleCall_0_1.equals(syntax))
				emit_initVals_BooleanParserRuleCall_3_1_or_INTTerminalRuleCall_1_1_or_STRINGTerminalRuleCall_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_publicinterfaeceDef___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a.equals(syntax))
				emit_publicinterfaeceDef___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variableDeclaratorId___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a.equals(syntax))
				emit_variableDeclaratorId___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     paramsDecl+=formalParameters (ambiguity) '{' methodBody+=functinality
	 */
	protected void emit_CColActions___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}' 'or' '{')?
	 *
	 * This ambiguous syntax occurs at:
	 *     statementDecl2+=AElementsBehaviorRoutines (ambiguity) statementDecl2+=AElementsBehaviorRoutines
	 */
	protected void emit_ControlDecisions___RightCurlyBracketKeyword_6_4_OrKeyword_6_0_LeftCurlyBracketKeyword_6_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=AtomicElement
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=FLOAT
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) variable=ID
	 *     (rule start) (ambiguity) {EqualityExpression.left=}
	 *     (rule start) (ambiguity) {LogicalExpression.left=}
	 *     (rule start) (ambiguity) {MinusOperation.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 *     (rule start) (ambiguity) {SumOperation.left=}
	 *     (rule start) (ambiguity) {Term.left=}
	 */
	protected void emit_Factor_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {EqualityExpression.left=}
	 *     (rule start) (ambiguity) {LogicalExpression.left=}
	 *     (rule start) (ambiguity) {MinusOperation.left=}
	 *     (rule start) (ambiguity) {RelationalExpression.left=}
	 *     (rule start) (ambiguity) {SumOperation.left=}
	 *     (rule start) (ambiguity) {Term.left=}
	 */
	protected void emit_Factor_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     paramsDecl=formalParameters (ambiguity) '{' functions+=AElementsBehaviorRoutines
	 */
	protected void emit_StochsticBehaviors___LeftSquareBracketKeyword_5_0_RightSquareBracketKeyword_5_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | INT | Boolean
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_initVals_BooleanParserRuleCall_3_1_or_INTTerminalRuleCall_1_1_or_STRINGTerminalRuleCall_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     paramsDecl=formalParameters (ambiguity) ';' (rule end)
	 */
	protected void emit_publicinterfaeceDef___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '}' (rule end)
	 */
	protected void emit_variableDeclaratorId___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
